/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UsDrivingLicenceBreakdownDocumentBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsDrivingLicenceBreakdownDocumentBreakdown{}

// UsDrivingLicenceBreakdownDocumentBreakdown struct for UsDrivingLicenceBreakdownDocumentBreakdown
type UsDrivingLicenceBreakdownDocumentBreakdown struct {
	Category *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"category,omitempty"`
	ExpirationDate *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"expiration_date,omitempty"`
	IssueDate *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"issue_date,omitempty"`
	DocumentNumber *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"document_number,omitempty"`
}

// NewUsDrivingLicenceBreakdownDocumentBreakdown instantiates a new UsDrivingLicenceBreakdownDocumentBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsDrivingLicenceBreakdownDocumentBreakdown() *UsDrivingLicenceBreakdownDocumentBreakdown {
	this := UsDrivingLicenceBreakdownDocumentBreakdown{}
	return &this
}

// NewUsDrivingLicenceBreakdownDocumentBreakdownWithDefaults instantiates a new UsDrivingLicenceBreakdownDocumentBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsDrivingLicenceBreakdownDocumentBreakdownWithDefaults() *UsDrivingLicenceBreakdownDocumentBreakdown {
	this := UsDrivingLicenceBreakdownDocumentBreakdown{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) GetCategory() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Category) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) GetCategoryOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Category field.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) SetCategory(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Category = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) GetExpirationDate() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) GetExpirationDateOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the ExpirationDate field.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) SetExpirationDate(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.ExpirationDate = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) GetIssueDate() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.IssueDate) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) GetIssueDateOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.IssueDate) {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) HasIssueDate() bool {
	if o != nil && !IsNil(o.IssueDate) {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the IssueDate field.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) SetIssueDate(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.IssueDate = &v
}

// GetDocumentNumber returns the DocumentNumber field value if set, zero value otherwise.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) GetDocumentNumber() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.DocumentNumber) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.DocumentNumber
}

// GetDocumentNumberOk returns a tuple with the DocumentNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) GetDocumentNumberOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.DocumentNumber) {
		return nil, false
	}
	return o.DocumentNumber, true
}

// HasDocumentNumber returns a boolean if a field has been set.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) HasDocumentNumber() bool {
	if o != nil && !IsNil(o.DocumentNumber) {
		return true
	}

	return false
}

// SetDocumentNumber gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the DocumentNumber field.
func (o *UsDrivingLicenceBreakdownDocumentBreakdown) SetDocumentNumber(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.DocumentNumber = &v
}

func (o UsDrivingLicenceBreakdownDocumentBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsDrivingLicenceBreakdownDocumentBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if !IsNil(o.IssueDate) {
		toSerialize["issue_date"] = o.IssueDate
	}
	if !IsNil(o.DocumentNumber) {
		toSerialize["document_number"] = o.DocumentNumber
	}
	return toSerialize, nil
}

type NullableUsDrivingLicenceBreakdownDocumentBreakdown struct {
	value *UsDrivingLicenceBreakdownDocumentBreakdown
	isSet bool
}

func (v NullableUsDrivingLicenceBreakdownDocumentBreakdown) Get() *UsDrivingLicenceBreakdownDocumentBreakdown {
	return v.value
}

func (v *NullableUsDrivingLicenceBreakdownDocumentBreakdown) Set(val *UsDrivingLicenceBreakdownDocumentBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableUsDrivingLicenceBreakdownDocumentBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableUsDrivingLicenceBreakdownDocumentBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsDrivingLicenceBreakdownDocumentBreakdown(val *UsDrivingLicenceBreakdownDocumentBreakdown) *NullableUsDrivingLicenceBreakdownDocumentBreakdown {
	return &NullableUsDrivingLicenceBreakdownDocumentBreakdown{value: val, isSet: true}
}

func (v NullableUsDrivingLicenceBreakdownDocumentBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsDrivingLicenceBreakdownDocumentBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeviceIntelligenceBreakdownProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceIntelligenceBreakdownProperties{}

// DeviceIntelligenceBreakdownProperties struct for DeviceIntelligenceBreakdownProperties
type DeviceIntelligenceBreakdownProperties struct {
	Device *DeviceIntelligenceBreakdownPropertiesDevice `json:"device,omitempty"`
	Ip *DeviceIntelligenceBreakdownPropertiesIp `json:"ip,omitempty"`
	Geolocation *DeviceIntelligenceBreakdownPropertiesGeolocation `json:"geolocation,omitempty"`
}

// NewDeviceIntelligenceBreakdownProperties instantiates a new DeviceIntelligenceBreakdownProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceIntelligenceBreakdownProperties() *DeviceIntelligenceBreakdownProperties {
	this := DeviceIntelligenceBreakdownProperties{}
	return &this
}

// NewDeviceIntelligenceBreakdownPropertiesWithDefaults instantiates a new DeviceIntelligenceBreakdownProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceIntelligenceBreakdownPropertiesWithDefaults() *DeviceIntelligenceBreakdownProperties {
	this := DeviceIntelligenceBreakdownProperties{}
	return &this
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DeviceIntelligenceBreakdownProperties) GetDevice() DeviceIntelligenceBreakdownPropertiesDevice {
	if o == nil || IsNil(o.Device) {
		var ret DeviceIntelligenceBreakdownPropertiesDevice
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceIntelligenceBreakdownProperties) GetDeviceOk() (*DeviceIntelligenceBreakdownPropertiesDevice, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DeviceIntelligenceBreakdownProperties) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given DeviceIntelligenceBreakdownPropertiesDevice and assigns it to the Device field.
func (o *DeviceIntelligenceBreakdownProperties) SetDevice(v DeviceIntelligenceBreakdownPropertiesDevice) {
	o.Device = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *DeviceIntelligenceBreakdownProperties) GetIp() DeviceIntelligenceBreakdownPropertiesIp {
	if o == nil || IsNil(o.Ip) {
		var ret DeviceIntelligenceBreakdownPropertiesIp
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceIntelligenceBreakdownProperties) GetIpOk() (*DeviceIntelligenceBreakdownPropertiesIp, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *DeviceIntelligenceBreakdownProperties) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given DeviceIntelligenceBreakdownPropertiesIp and assigns it to the Ip field.
func (o *DeviceIntelligenceBreakdownProperties) SetIp(v DeviceIntelligenceBreakdownPropertiesIp) {
	o.Ip = &v
}

// GetGeolocation returns the Geolocation field value if set, zero value otherwise.
func (o *DeviceIntelligenceBreakdownProperties) GetGeolocation() DeviceIntelligenceBreakdownPropertiesGeolocation {
	if o == nil || IsNil(o.Geolocation) {
		var ret DeviceIntelligenceBreakdownPropertiesGeolocation
		return ret
	}
	return *o.Geolocation
}

// GetGeolocationOk returns a tuple with the Geolocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceIntelligenceBreakdownProperties) GetGeolocationOk() (*DeviceIntelligenceBreakdownPropertiesGeolocation, bool) {
	if o == nil || IsNil(o.Geolocation) {
		return nil, false
	}
	return o.Geolocation, true
}

// HasGeolocation returns a boolean if a field has been set.
func (o *DeviceIntelligenceBreakdownProperties) HasGeolocation() bool {
	if o != nil && !IsNil(o.Geolocation) {
		return true
	}

	return false
}

// SetGeolocation gets a reference to the given DeviceIntelligenceBreakdownPropertiesGeolocation and assigns it to the Geolocation field.
func (o *DeviceIntelligenceBreakdownProperties) SetGeolocation(v DeviceIntelligenceBreakdownPropertiesGeolocation) {
	o.Geolocation = &v
}

func (o DeviceIntelligenceBreakdownProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceIntelligenceBreakdownProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Geolocation) {
		toSerialize["geolocation"] = o.Geolocation
	}
	return toSerialize, nil
}

type NullableDeviceIntelligenceBreakdownProperties struct {
	value *DeviceIntelligenceBreakdownProperties
	isSet bool
}

func (v NullableDeviceIntelligenceBreakdownProperties) Get() *DeviceIntelligenceBreakdownProperties {
	return v.value
}

func (v *NullableDeviceIntelligenceBreakdownProperties) Set(val *DeviceIntelligenceBreakdownProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceIntelligenceBreakdownProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceIntelligenceBreakdownProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceIntelligenceBreakdownProperties(val *DeviceIntelligenceBreakdownProperties) *NullableDeviceIntelligenceBreakdownProperties {
	return &NullableDeviceIntelligenceBreakdownProperties{value: val, isSet: true}
}

func (v NullableDeviceIntelligenceBreakdownProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceIntelligenceBreakdownProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Extraction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Extraction{}

// Extraction struct for Extraction
type Extraction struct {
	// The unique identifier of the uploaded document.
	DocumentId *string `json:"document_id,omitempty"`
	DocumentClassification *ExtractionDocumentClassification `json:"document_classification,omitempty"`
	ExtractedData *ExtractionExtractedData `json:"extracted_data,omitempty"`
}

// NewExtraction instantiates a new Extraction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtraction() *Extraction {
	this := Extraction{}
	return &this
}

// NewExtractionWithDefaults instantiates a new Extraction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtractionWithDefaults() *Extraction {
	this := Extraction{}
	return &this
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *Extraction) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId) {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extraction) GetDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *Extraction) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *Extraction) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetDocumentClassification returns the DocumentClassification field value if set, zero value otherwise.
func (o *Extraction) GetDocumentClassification() ExtractionDocumentClassification {
	if o == nil || IsNil(o.DocumentClassification) {
		var ret ExtractionDocumentClassification
		return ret
	}
	return *o.DocumentClassification
}

// GetDocumentClassificationOk returns a tuple with the DocumentClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extraction) GetDocumentClassificationOk() (*ExtractionDocumentClassification, bool) {
	if o == nil || IsNil(o.DocumentClassification) {
		return nil, false
	}
	return o.DocumentClassification, true
}

// HasDocumentClassification returns a boolean if a field has been set.
func (o *Extraction) HasDocumentClassification() bool {
	if o != nil && !IsNil(o.DocumentClassification) {
		return true
	}

	return false
}

// SetDocumentClassification gets a reference to the given ExtractionDocumentClassification and assigns it to the DocumentClassification field.
func (o *Extraction) SetDocumentClassification(v ExtractionDocumentClassification) {
	o.DocumentClassification = &v
}

// GetExtractedData returns the ExtractedData field value if set, zero value otherwise.
func (o *Extraction) GetExtractedData() ExtractionExtractedData {
	if o == nil || IsNil(o.ExtractedData) {
		var ret ExtractionExtractedData
		return ret
	}
	return *o.ExtractedData
}

// GetExtractedDataOk returns a tuple with the ExtractedData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extraction) GetExtractedDataOk() (*ExtractionExtractedData, bool) {
	if o == nil || IsNil(o.ExtractedData) {
		return nil, false
	}
	return o.ExtractedData, true
}

// HasExtractedData returns a boolean if a field has been set.
func (o *Extraction) HasExtractedData() bool {
	if o != nil && !IsNil(o.ExtractedData) {
		return true
	}

	return false
}

// SetExtractedData gets a reference to the given ExtractionExtractedData and assigns it to the ExtractedData field.
func (o *Extraction) SetExtractedData(v ExtractionExtractedData) {
	o.ExtractedData = &v
}

func (o Extraction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Extraction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentId) {
		toSerialize["document_id"] = o.DocumentId
	}
	if !IsNil(o.DocumentClassification) {
		toSerialize["document_classification"] = o.DocumentClassification
	}
	if !IsNil(o.ExtractedData) {
		toSerialize["extracted_data"] = o.ExtractedData
	}
	return toSerialize, nil
}

type NullableExtraction struct {
	value *Extraction
	isSet bool
}

func (v NullableExtraction) Get() *Extraction {
	return v.value
}

func (v *NullableExtraction) Set(val *Extraction) {
	v.value = val
	v.isSet = true
}

func (v NullableExtraction) IsSet() bool {
	return v.isSet
}

func (v *NullableExtraction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtraction(val *Extraction) *NullableExtraction {
	return &NullableExtraction{value: val, isSet: true}
}

func (v NullableExtraction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtraction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WatchlistMonitorsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WatchlistMonitorsList{}

// WatchlistMonitorsList struct for WatchlistMonitorsList
type WatchlistMonitorsList struct {
	Monitors []WatchlistMonitor `json:"monitors"`
}

type _WatchlistMonitorsList WatchlistMonitorsList

// NewWatchlistMonitorsList instantiates a new WatchlistMonitorsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchlistMonitorsList(monitors []WatchlistMonitor) *WatchlistMonitorsList {
	this := WatchlistMonitorsList{}
	this.Monitors = monitors
	return &this
}

// NewWatchlistMonitorsListWithDefaults instantiates a new WatchlistMonitorsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchlistMonitorsListWithDefaults() *WatchlistMonitorsList {
	this := WatchlistMonitorsList{}
	return &this
}

// GetMonitors returns the Monitors field value
func (o *WatchlistMonitorsList) GetMonitors() []WatchlistMonitor {
	if o == nil {
		var ret []WatchlistMonitor
		return ret
	}

	return o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value
// and a boolean to check if the value has been set.
func (o *WatchlistMonitorsList) GetMonitorsOk() ([]WatchlistMonitor, bool) {
	if o == nil {
		return nil, false
	}
	return o.Monitors, true
}

// SetMonitors sets field value
func (o *WatchlistMonitorsList) SetMonitors(v []WatchlistMonitor) {
	o.Monitors = v
}

func (o WatchlistMonitorsList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WatchlistMonitorsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["monitors"] = o.Monitors
	return toSerialize, nil
}

func (o *WatchlistMonitorsList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"monitors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWatchlistMonitorsList := _WatchlistMonitorsList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWatchlistMonitorsList)

	if err != nil {
		return err
	}

	*o = WatchlistMonitorsList(varWatchlistMonitorsList)

	return err
}

type NullableWatchlistMonitorsList struct {
	value *WatchlistMonitorsList
	isSet bool
}

func (v NullableWatchlistMonitorsList) Get() *WatchlistMonitorsList {
	return v.value
}

func (v *NullableWatchlistMonitorsList) Set(val *WatchlistMonitorsList) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchlistMonitorsList) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchlistMonitorsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchlistMonitorsList(val *WatchlistMonitorsList) *NullableWatchlistMonitorsList {
	return &NullableWatchlistMonitorsList{value: val, isSet: true}
}

func (v NullableWatchlistMonitorsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchlistMonitorsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



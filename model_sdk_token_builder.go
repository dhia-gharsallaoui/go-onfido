/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SdkTokenBuilder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SdkTokenBuilder{}

// SdkTokenBuilder struct for SdkTokenBuilder
type SdkTokenBuilder struct {
	// The unique identifier of the applicant
	ApplicantId string `json:"applicant_id"`
	// The referrer URL pattern
	Referrer *string `json:"referrer,omitempty"`
	// The application ID (iOS or Android)
	ApplicationId *string `json:"application_id,omitempty"`
	// The URL to be used by the Web SDK for the cross device flow.
	CrossDeviceUrl *string `json:"cross_device_url,omitempty"`
}

type _SdkTokenBuilder SdkTokenBuilder

// NewSdkTokenBuilder instantiates a new SdkTokenBuilder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSdkTokenBuilder(applicantId string) *SdkTokenBuilder {
	this := SdkTokenBuilder{}
	this.ApplicantId = applicantId
	return &this
}

// NewSdkTokenBuilderWithDefaults instantiates a new SdkTokenBuilder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSdkTokenBuilderWithDefaults() *SdkTokenBuilder {
	this := SdkTokenBuilder{}
	return &this
}

// GetApplicantId returns the ApplicantId field value
func (o *SdkTokenBuilder) GetApplicantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicantId
}

// GetApplicantIdOk returns a tuple with the ApplicantId field value
// and a boolean to check if the value has been set.
func (o *SdkTokenBuilder) GetApplicantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicantId, true
}

// SetApplicantId sets field value
func (o *SdkTokenBuilder) SetApplicantId(v string) {
	o.ApplicantId = v
}

// GetReferrer returns the Referrer field value if set, zero value otherwise.
func (o *SdkTokenBuilder) GetReferrer() string {
	if o == nil || IsNil(o.Referrer) {
		var ret string
		return ret
	}
	return *o.Referrer
}

// GetReferrerOk returns a tuple with the Referrer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkTokenBuilder) GetReferrerOk() (*string, bool) {
	if o == nil || IsNil(o.Referrer) {
		return nil, false
	}
	return o.Referrer, true
}

// HasReferrer returns a boolean if a field has been set.
func (o *SdkTokenBuilder) HasReferrer() bool {
	if o != nil && !IsNil(o.Referrer) {
		return true
	}

	return false
}

// SetReferrer gets a reference to the given string and assigns it to the Referrer field.
func (o *SdkTokenBuilder) SetReferrer(v string) {
	o.Referrer = &v
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *SdkTokenBuilder) GetApplicationId() string {
	if o == nil || IsNil(o.ApplicationId) {
		var ret string
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkTokenBuilder) GetApplicationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationId) {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *SdkTokenBuilder) HasApplicationId() bool {
	if o != nil && !IsNil(o.ApplicationId) {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given string and assigns it to the ApplicationId field.
func (o *SdkTokenBuilder) SetApplicationId(v string) {
	o.ApplicationId = &v
}

// GetCrossDeviceUrl returns the CrossDeviceUrl field value if set, zero value otherwise.
func (o *SdkTokenBuilder) GetCrossDeviceUrl() string {
	if o == nil || IsNil(o.CrossDeviceUrl) {
		var ret string
		return ret
	}
	return *o.CrossDeviceUrl
}

// GetCrossDeviceUrlOk returns a tuple with the CrossDeviceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkTokenBuilder) GetCrossDeviceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CrossDeviceUrl) {
		return nil, false
	}
	return o.CrossDeviceUrl, true
}

// HasCrossDeviceUrl returns a boolean if a field has been set.
func (o *SdkTokenBuilder) HasCrossDeviceUrl() bool {
	if o != nil && !IsNil(o.CrossDeviceUrl) {
		return true
	}

	return false
}

// SetCrossDeviceUrl gets a reference to the given string and assigns it to the CrossDeviceUrl field.
func (o *SdkTokenBuilder) SetCrossDeviceUrl(v string) {
	o.CrossDeviceUrl = &v
}

func (o SdkTokenBuilder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SdkTokenBuilder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicant_id"] = o.ApplicantId
	if !IsNil(o.Referrer) {
		toSerialize["referrer"] = o.Referrer
	}
	if !IsNil(o.ApplicationId) {
		toSerialize["application_id"] = o.ApplicationId
	}
	if !IsNil(o.CrossDeviceUrl) {
		toSerialize["cross_device_url"] = o.CrossDeviceUrl
	}
	return toSerialize, nil
}

func (o *SdkTokenBuilder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"applicant_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSdkTokenBuilder := _SdkTokenBuilder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSdkTokenBuilder)

	if err != nil {
		return err
	}

	*o = SdkTokenBuilder(varSdkTokenBuilder)

	return err
}

type NullableSdkTokenBuilder struct {
	value *SdkTokenBuilder
	isSet bool
}

func (v NullableSdkTokenBuilder) Get() *SdkTokenBuilder {
	return v.value
}

func (v *NullableSdkTokenBuilder) Set(val *SdkTokenBuilder) {
	v.value = val
	v.isSet = true
}

func (v NullableSdkTokenBuilder) IsSet() bool {
	return v.isSet
}

func (v *NullableSdkTokenBuilder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdkTokenBuilder(val *SdkTokenBuilder) *NullableSdkTokenBuilder {
	return &NullableSdkTokenBuilder{value: val, isSet: true}
}

func (v NullableSdkTokenBuilder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdkTokenBuilder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



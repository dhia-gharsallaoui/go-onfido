/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeviceIntelligenceBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceIntelligenceBreakdown{}

// DeviceIntelligenceBreakdown struct for DeviceIntelligenceBreakdown
type DeviceIntelligenceBreakdown struct {
	Breakdown *DeviceIntelligenceBreakdownBreakdown `json:"breakdown,omitempty"`
	Properties *DeviceIntelligenceBreakdownProperties `json:"properties,omitempty"`
}

// NewDeviceIntelligenceBreakdown instantiates a new DeviceIntelligenceBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceIntelligenceBreakdown() *DeviceIntelligenceBreakdown {
	this := DeviceIntelligenceBreakdown{}
	return &this
}

// NewDeviceIntelligenceBreakdownWithDefaults instantiates a new DeviceIntelligenceBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceIntelligenceBreakdownWithDefaults() *DeviceIntelligenceBreakdown {
	this := DeviceIntelligenceBreakdown{}
	return &this
}

// GetBreakdown returns the Breakdown field value if set, zero value otherwise.
func (o *DeviceIntelligenceBreakdown) GetBreakdown() DeviceIntelligenceBreakdownBreakdown {
	if o == nil || IsNil(o.Breakdown) {
		var ret DeviceIntelligenceBreakdownBreakdown
		return ret
	}
	return *o.Breakdown
}

// GetBreakdownOk returns a tuple with the Breakdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceIntelligenceBreakdown) GetBreakdownOk() (*DeviceIntelligenceBreakdownBreakdown, bool) {
	if o == nil || IsNil(o.Breakdown) {
		return nil, false
	}
	return o.Breakdown, true
}

// HasBreakdown returns a boolean if a field has been set.
func (o *DeviceIntelligenceBreakdown) HasBreakdown() bool {
	if o != nil && !IsNil(o.Breakdown) {
		return true
	}

	return false
}

// SetBreakdown gets a reference to the given DeviceIntelligenceBreakdownBreakdown and assigns it to the Breakdown field.
func (o *DeviceIntelligenceBreakdown) SetBreakdown(v DeviceIntelligenceBreakdownBreakdown) {
	o.Breakdown = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DeviceIntelligenceBreakdown) GetProperties() DeviceIntelligenceBreakdownProperties {
	if o == nil || IsNil(o.Properties) {
		var ret DeviceIntelligenceBreakdownProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceIntelligenceBreakdown) GetPropertiesOk() (*DeviceIntelligenceBreakdownProperties, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DeviceIntelligenceBreakdown) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given DeviceIntelligenceBreakdownProperties and assigns it to the Properties field.
func (o *DeviceIntelligenceBreakdown) SetProperties(v DeviceIntelligenceBreakdownProperties) {
	o.Properties = &v
}

func (o DeviceIntelligenceBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceIntelligenceBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Breakdown) {
		toSerialize["breakdown"] = o.Breakdown
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableDeviceIntelligenceBreakdown struct {
	value *DeviceIntelligenceBreakdown
	isSet bool
}

func (v NullableDeviceIntelligenceBreakdown) Get() *DeviceIntelligenceBreakdown {
	return v.value
}

func (v *NullableDeviceIntelligenceBreakdown) Set(val *DeviceIntelligenceBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceIntelligenceBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceIntelligenceBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceIntelligenceBreakdown(val *DeviceIntelligenceBreakdown) *NullableDeviceIntelligenceBreakdown {
	return &NullableDeviceIntelligenceBreakdown{value: val, isSet: true}
}

func (v NullableDeviceIntelligenceBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceIntelligenceBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



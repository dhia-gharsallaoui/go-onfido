/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WatchlistMonitorMatchesUpdater type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WatchlistMonitorMatchesUpdater{}

// WatchlistMonitorMatchesUpdater struct for WatchlistMonitorMatchesUpdater
type WatchlistMonitorMatchesUpdater struct {
	Enable []string `json:"enable,omitempty"`
	Disable []string `json:"disable,omitempty"`
}

// NewWatchlistMonitorMatchesUpdater instantiates a new WatchlistMonitorMatchesUpdater object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchlistMonitorMatchesUpdater() *WatchlistMonitorMatchesUpdater {
	this := WatchlistMonitorMatchesUpdater{}
	return &this
}

// NewWatchlistMonitorMatchesUpdaterWithDefaults instantiates a new WatchlistMonitorMatchesUpdater object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchlistMonitorMatchesUpdaterWithDefaults() *WatchlistMonitorMatchesUpdater {
	this := WatchlistMonitorMatchesUpdater{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *WatchlistMonitorMatchesUpdater) GetEnable() []string {
	if o == nil || IsNil(o.Enable) {
		var ret []string
		return ret
	}
	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistMonitorMatchesUpdater) GetEnableOk() ([]string, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *WatchlistMonitorMatchesUpdater) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given []string and assigns it to the Enable field.
func (o *WatchlistMonitorMatchesUpdater) SetEnable(v []string) {
	o.Enable = v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *WatchlistMonitorMatchesUpdater) GetDisable() []string {
	if o == nil || IsNil(o.Disable) {
		var ret []string
		return ret
	}
	return o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistMonitorMatchesUpdater) GetDisableOk() ([]string, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *WatchlistMonitorMatchesUpdater) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given []string and assigns it to the Disable field.
func (o *WatchlistMonitorMatchesUpdater) SetDisable(v []string) {
	o.Disable = v
}

func (o WatchlistMonitorMatchesUpdater) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WatchlistMonitorMatchesUpdater) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	return toSerialize, nil
}

type NullableWatchlistMonitorMatchesUpdater struct {
	value *WatchlistMonitorMatchesUpdater
	isSet bool
}

func (v NullableWatchlistMonitorMatchesUpdater) Get() *WatchlistMonitorMatchesUpdater {
	return v.value
}

func (v *NullableWatchlistMonitorMatchesUpdater) Set(val *WatchlistMonitorMatchesUpdater) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchlistMonitorMatchesUpdater) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchlistMonitorMatchesUpdater) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchlistMonitorMatchesUpdater(val *WatchlistMonitorMatchesUpdater) *NullableWatchlistMonitorMatchesUpdater {
	return &NullableWatchlistMonitorMatchesUpdater{value: val, isSet: true}
}

func (v NullableWatchlistMonitorMatchesUpdater) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchlistMonitorMatchesUpdater) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



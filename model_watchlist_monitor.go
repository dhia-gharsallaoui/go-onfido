/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the WatchlistMonitor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WatchlistMonitor{}

// WatchlistMonitor struct for WatchlistMonitor
type WatchlistMonitor struct {
	// The ID for the applicant associated with the monitor.
	ApplicantId string `json:"applicant_id"`
	// The name of the report type the monitor creates.
	ReportName string `json:"report_name"`
	// A list of tags associated with this monitor. These tags will be applied to each check this monitor creates.
	Tags []string `json:"tags,omitempty"`
	// The unique identifier for the monitor.
	Id string `json:"id"`
	// The date and time at which the monitor was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time at which the monitor was deleted. If the monitor is still active, this field will be null.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Indicates whether the object was created in the sandbox or not.
	IsSandbox *bool `json:"is_sandbox,omitempty"`
}

type _WatchlistMonitor WatchlistMonitor

// NewWatchlistMonitor instantiates a new WatchlistMonitor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchlistMonitor(applicantId string, reportName string, id string) *WatchlistMonitor {
	this := WatchlistMonitor{}
	this.ApplicantId = applicantId
	this.ReportName = reportName
	this.Id = id
	var isSandbox bool = false
	this.IsSandbox = &isSandbox
	return &this
}

// NewWatchlistMonitorWithDefaults instantiates a new WatchlistMonitor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchlistMonitorWithDefaults() *WatchlistMonitor {
	this := WatchlistMonitor{}
	var isSandbox bool = false
	this.IsSandbox = &isSandbox
	return &this
}

// GetApplicantId returns the ApplicantId field value
func (o *WatchlistMonitor) GetApplicantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicantId
}

// GetApplicantIdOk returns a tuple with the ApplicantId field value
// and a boolean to check if the value has been set.
func (o *WatchlistMonitor) GetApplicantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicantId, true
}

// SetApplicantId sets field value
func (o *WatchlistMonitor) SetApplicantId(v string) {
	o.ApplicantId = v
}

// GetReportName returns the ReportName field value
func (o *WatchlistMonitor) GetReportName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReportName
}

// GetReportNameOk returns a tuple with the ReportName field value
// and a boolean to check if the value has been set.
func (o *WatchlistMonitor) GetReportNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportName, true
}

// SetReportName sets field value
func (o *WatchlistMonitor) SetReportName(v string) {
	o.ReportName = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *WatchlistMonitor) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistMonitor) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *WatchlistMonitor) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *WatchlistMonitor) SetTags(v []string) {
	o.Tags = v
}

// GetId returns the Id field value
func (o *WatchlistMonitor) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WatchlistMonitor) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WatchlistMonitor) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WatchlistMonitor) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistMonitor) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WatchlistMonitor) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *WatchlistMonitor) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *WatchlistMonitor) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistMonitor) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *WatchlistMonitor) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *WatchlistMonitor) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetIsSandbox returns the IsSandbox field value if set, zero value otherwise.
func (o *WatchlistMonitor) GetIsSandbox() bool {
	if o == nil || IsNil(o.IsSandbox) {
		var ret bool
		return ret
	}
	return *o.IsSandbox
}

// GetIsSandboxOk returns a tuple with the IsSandbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistMonitor) GetIsSandboxOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSandbox) {
		return nil, false
	}
	return o.IsSandbox, true
}

// HasIsSandbox returns a boolean if a field has been set.
func (o *WatchlistMonitor) HasIsSandbox() bool {
	if o != nil && !IsNil(o.IsSandbox) {
		return true
	}

	return false
}

// SetIsSandbox gets a reference to the given bool and assigns it to the IsSandbox field.
func (o *WatchlistMonitor) SetIsSandbox(v bool) {
	o.IsSandbox = &v
}

func (o WatchlistMonitor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WatchlistMonitor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicant_id"] = o.ApplicantId
	toSerialize["report_name"] = o.ReportName
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.IsSandbox) {
		toSerialize["is_sandbox"] = o.IsSandbox
	}
	return toSerialize, nil
}

func (o *WatchlistMonitor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"applicant_id",
		"report_name",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWatchlistMonitor := _WatchlistMonitor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWatchlistMonitor)

	if err != nil {
		return err
	}

	*o = WatchlistMonitor(varWatchlistMonitor)

	return err
}

type NullableWatchlistMonitor struct {
	value *WatchlistMonitor
	isSet bool
}

func (v NullableWatchlistMonitor) Get() *WatchlistMonitor {
	return v.value
}

func (v *NullableWatchlistMonitor) Set(val *WatchlistMonitor) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchlistMonitor) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchlistMonitor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchlistMonitor(val *WatchlistMonitor) *NullableWatchlistMonitor {
	return &NullableWatchlistMonitor{value: val, isSet: true}
}

func (v NullableWatchlistMonitor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchlistMonitor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DocumentsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentsList{}

// DocumentsList struct for DocumentsList
type DocumentsList struct {
	Documents []Document `json:"documents"`
}

type _DocumentsList DocumentsList

// NewDocumentsList instantiates a new DocumentsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentsList(documents []Document) *DocumentsList {
	this := DocumentsList{}
	this.Documents = documents
	return &this
}

// NewDocumentsListWithDefaults instantiates a new DocumentsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentsListWithDefaults() *DocumentsList {
	this := DocumentsList{}
	return &this
}

// GetDocuments returns the Documents field value
func (o *DocumentsList) GetDocuments() []Document {
	if o == nil {
		var ret []Document
		return ret
	}

	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value
// and a boolean to check if the value has been set.
func (o *DocumentsList) GetDocumentsOk() ([]Document, bool) {
	if o == nil {
		return nil, false
	}
	return o.Documents, true
}

// SetDocuments sets field value
func (o *DocumentsList) SetDocuments(v []Document) {
	o.Documents = v
}

func (o DocumentsList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["documents"] = o.Documents
	return toSerialize, nil
}

func (o *DocumentsList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"documents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentsList := _DocumentsList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentsList)

	if err != nil {
		return err
	}

	*o = DocumentsList(varDocumentsList)

	return err
}

type NullableDocumentsList struct {
	value *DocumentsList
	isSet bool
}

func (v NullableDocumentsList) Get() *DocumentsList {
	return v.value
}

func (v *NullableDocumentsList) Set(val *DocumentsList) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentsList) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentsList(val *DocumentsList) *NullableDocumentsList {
	return &NullableDocumentsList{value: val, isSet: true}
}

func (v NullableDocumentsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



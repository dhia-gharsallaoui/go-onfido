/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IdPhotosList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdPhotosList{}

// IdPhotosList struct for IdPhotosList
type IdPhotosList struct {
	IdPhotos []IdPhoto `json:"id_photos"`
}

type _IdPhotosList IdPhotosList

// NewIdPhotosList instantiates a new IdPhotosList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdPhotosList(idPhotos []IdPhoto) *IdPhotosList {
	this := IdPhotosList{}
	this.IdPhotos = idPhotos
	return &this
}

// NewIdPhotosListWithDefaults instantiates a new IdPhotosList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdPhotosListWithDefaults() *IdPhotosList {
	this := IdPhotosList{}
	return &this
}

// GetIdPhotos returns the IdPhotos field value
func (o *IdPhotosList) GetIdPhotos() []IdPhoto {
	if o == nil {
		var ret []IdPhoto
		return ret
	}

	return o.IdPhotos
}

// GetIdPhotosOk returns a tuple with the IdPhotos field value
// and a boolean to check if the value has been set.
func (o *IdPhotosList) GetIdPhotosOk() ([]IdPhoto, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdPhotos, true
}

// SetIdPhotos sets field value
func (o *IdPhotosList) SetIdPhotos(v []IdPhoto) {
	o.IdPhotos = v
}

func (o IdPhotosList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdPhotosList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id_photos"] = o.IdPhotos
	return toSerialize, nil
}

func (o *IdPhotosList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id_photos",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdPhotosList := _IdPhotosList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdPhotosList)

	if err != nil {
		return err
	}

	*o = IdPhotosList(varIdPhotosList)

	return err
}

type NullableIdPhotosList struct {
	value *IdPhotosList
	isSet bool
}

func (v NullableIdPhotosList) Get() *IdPhotosList {
	return v.value
}

func (v *NullableIdPhotosList) Set(val *IdPhotosList) {
	v.value = val
	v.isSet = true
}

func (v NullableIdPhotosList) IsSet() bool {
	return v.isSet
}

func (v *NullableIdPhotosList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdPhotosList(val *IdPhotosList) *NullableIdPhotosList {
	return &NullableIdPhotosList{value: val, isSet: true}
}

func (v NullableIdPhotosList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdPhotosList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



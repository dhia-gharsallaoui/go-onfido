/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExtractionDocumentClassification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtractionDocumentClassification{}

// ExtractionDocumentClassification struct for ExtractionDocumentClassification
type ExtractionDocumentClassification struct {
	// Document country in 3-letter ISO code.
	IssuingCountry *CountryCodes `json:"issuing_country,omitempty"`
	// Type of document.
	DocumentType *DocumentTypes `json:"document_type,omitempty"`
	// The state that issued the document (if available).
	IssuingState *string `json:"issuing_state,omitempty"`
	// The document subtype (if available).
	Subtype *string `json:"subtype,omitempty"`
	// The document issuing version (if available).
	Version *string `json:"version,omitempty"`
}

// NewExtractionDocumentClassification instantiates a new ExtractionDocumentClassification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtractionDocumentClassification() *ExtractionDocumentClassification {
	this := ExtractionDocumentClassification{}
	return &this
}

// NewExtractionDocumentClassificationWithDefaults instantiates a new ExtractionDocumentClassification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtractionDocumentClassificationWithDefaults() *ExtractionDocumentClassification {
	this := ExtractionDocumentClassification{}
	return &this
}

// GetIssuingCountry returns the IssuingCountry field value if set, zero value otherwise.
func (o *ExtractionDocumentClassification) GetIssuingCountry() CountryCodes {
	if o == nil || IsNil(o.IssuingCountry) {
		var ret CountryCodes
		return ret
	}
	return *o.IssuingCountry
}

// GetIssuingCountryOk returns a tuple with the IssuingCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractionDocumentClassification) GetIssuingCountryOk() (*CountryCodes, bool) {
	if o == nil || IsNil(o.IssuingCountry) {
		return nil, false
	}
	return o.IssuingCountry, true
}

// HasIssuingCountry returns a boolean if a field has been set.
func (o *ExtractionDocumentClassification) HasIssuingCountry() bool {
	if o != nil && !IsNil(o.IssuingCountry) {
		return true
	}

	return false
}

// SetIssuingCountry gets a reference to the given CountryCodes and assigns it to the IssuingCountry field.
func (o *ExtractionDocumentClassification) SetIssuingCountry(v CountryCodes) {
	o.IssuingCountry = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *ExtractionDocumentClassification) GetDocumentType() DocumentTypes {
	if o == nil || IsNil(o.DocumentType) {
		var ret DocumentTypes
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractionDocumentClassification) GetDocumentTypeOk() (*DocumentTypes, bool) {
	if o == nil || IsNil(o.DocumentType) {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *ExtractionDocumentClassification) HasDocumentType() bool {
	if o != nil && !IsNil(o.DocumentType) {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given DocumentTypes and assigns it to the DocumentType field.
func (o *ExtractionDocumentClassification) SetDocumentType(v DocumentTypes) {
	o.DocumentType = &v
}

// GetIssuingState returns the IssuingState field value if set, zero value otherwise.
func (o *ExtractionDocumentClassification) GetIssuingState() string {
	if o == nil || IsNil(o.IssuingState) {
		var ret string
		return ret
	}
	return *o.IssuingState
}

// GetIssuingStateOk returns a tuple with the IssuingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractionDocumentClassification) GetIssuingStateOk() (*string, bool) {
	if o == nil || IsNil(o.IssuingState) {
		return nil, false
	}
	return o.IssuingState, true
}

// HasIssuingState returns a boolean if a field has been set.
func (o *ExtractionDocumentClassification) HasIssuingState() bool {
	if o != nil && !IsNil(o.IssuingState) {
		return true
	}

	return false
}

// SetIssuingState gets a reference to the given string and assigns it to the IssuingState field.
func (o *ExtractionDocumentClassification) SetIssuingState(v string) {
	o.IssuingState = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *ExtractionDocumentClassification) GetSubtype() string {
	if o == nil || IsNil(o.Subtype) {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractionDocumentClassification) GetSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *ExtractionDocumentClassification) HasSubtype() bool {
	if o != nil && !IsNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *ExtractionDocumentClassification) SetSubtype(v string) {
	o.Subtype = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ExtractionDocumentClassification) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractionDocumentClassification) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ExtractionDocumentClassification) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ExtractionDocumentClassification) SetVersion(v string) {
	o.Version = &v
}

func (o ExtractionDocumentClassification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtractionDocumentClassification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IssuingCountry) {
		toSerialize["issuing_country"] = o.IssuingCountry
	}
	if !IsNil(o.DocumentType) {
		toSerialize["document_type"] = o.DocumentType
	}
	if !IsNil(o.IssuingState) {
		toSerialize["issuing_state"] = o.IssuingState
	}
	if !IsNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableExtractionDocumentClassification struct {
	value *ExtractionDocumentClassification
	isSet bool
}

func (v NullableExtractionDocumentClassification) Get() *ExtractionDocumentClassification {
	return v.value
}

func (v *NullableExtractionDocumentClassification) Set(val *ExtractionDocumentClassification) {
	v.value = val
	v.isSet = true
}

func (v NullableExtractionDocumentClassification) IsSet() bool {
	return v.isSet
}

func (v *NullableExtractionDocumentClassification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtractionDocumentClassification(val *ExtractionDocumentClassification) *NullableExtractionDocumentClassification {
	return &NullableExtractionDocumentClassification{value: val, isSet: true}
}

func (v NullableExtractionDocumentClassification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtractionDocumentClassification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



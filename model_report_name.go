/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReportName the model 'ReportName'
type ReportName string

// List of report_name
const (
	DOCUMENT ReportName = "document"
	DOCUMENT_VIDEO ReportName = "document_video"
	DOCUMENT_VIDEO_WITH_ADDRESS_INFORMATION ReportName = "document_video_with_address_information"
	DOCUMENT_WITH_ADDRESS_INFORMATION ReportName = "document_with_address_information"
	DOCUMENT_WITH_DRIVING_LICENCE_INFORMATION ReportName = "document_with_driving_licence_information"
	DOCUMENT_WITH_DRIVER_VERIFICATION ReportName = "document_with_driver_verification"
	FACIAL_SIMILARITY_PHOTO ReportName = "facial_similarity_photo"
	FACIAL_SIMILARITY_PHOTO_FULLY_AUTO ReportName = "facial_similarity_photo_fully_auto"
	FACIAL_SIMILARITY_VIDEO ReportName = "facial_similarity_video"
	FACIAL_SIMILARITY_MOTION ReportName = "facial_similarity_motion"
	KNOWN_FACES ReportName = "known_faces"
	IDENTITY_ENHANCED ReportName = "identity_enhanced"
	WATCHLIST_AML ReportName = "watchlist_aml"
	WATCHLIST_ENHANCED ReportName = "watchlist_enhanced"
	WATCHLIST_STANDARD ReportName = "watchlist_standard"
	WATCHLIST_PEPS_ONLY ReportName = "watchlist_peps_only"
	WATCHLIST_SANCTIONS_ONLY ReportName = "watchlist_sanctions_only"
	PROOF_OF_ADDRESS ReportName = "proof_of_address"
	US_DRIVING_LICENCE ReportName = "us_driving_licence"
	DEVICE_INTELLIGENCE ReportName = "device_intelligence"
	INDIA_PAN ReportName = "india_pan"
)

// All allowed values of ReportName enum
var AllowedReportNameEnumValues = []ReportName{
	"document",
	"document_video",
	"document_video_with_address_information",
	"document_with_address_information",
	"document_with_driving_licence_information",
	"document_with_driver_verification",
	"facial_similarity_photo",
	"facial_similarity_photo_fully_auto",
	"facial_similarity_video",
	"facial_similarity_motion",
	"known_faces",
	"identity_enhanced",
	"watchlist_aml",
	"watchlist_enhanced",
	"watchlist_standard",
	"watchlist_peps_only",
	"watchlist_sanctions_only",
	"proof_of_address",
	"us_driving_licence",
	"device_intelligence",
	"india_pan",
}

func (v *ReportName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportName(value)
	for _, existing := range AllowedReportNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportName", value)
}

// NewReportNameFromValue returns a pointer to a valid ReportName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportNameFromValue(v string) (*ReportName, error) {
	ev := ReportName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportName: valid values are %v", v, AllowedReportNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportName) IsValid() bool {
	for _, existing := range AllowedReportNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to report_name value
func (v ReportName) Ptr() *ReportName {
	return &v
}

type NullableReportName struct {
	value *ReportName
	isSet bool
}

func (v NullableReportName) Get() *ReportName {
	return v.value
}

func (v *NullableReportName) Set(val *ReportName) {
	v.value = val
	v.isSet = true
}

func (v NullableReportName) IsSet() bool {
	return v.isSet
}

func (v *NullableReportName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportName(val *ReportName) *NullableReportName {
	return &NullableReportName{value: val, isSet: true}
}

func (v NullableReportName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


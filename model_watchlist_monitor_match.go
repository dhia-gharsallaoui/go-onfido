/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WatchlistMonitorMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WatchlistMonitorMatch{}

// WatchlistMonitorMatch struct for WatchlistMonitorMatch
type WatchlistMonitorMatch struct {
	// Monitor ID
	Id *string `json:"id,omitempty"`
	// Monitor status
	Enabled *bool `json:"enabled,omitempty"`
}

// NewWatchlistMonitorMatch instantiates a new WatchlistMonitorMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchlistMonitorMatch() *WatchlistMonitorMatch {
	this := WatchlistMonitorMatch{}
	return &this
}

// NewWatchlistMonitorMatchWithDefaults instantiates a new WatchlistMonitorMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchlistMonitorMatchWithDefaults() *WatchlistMonitorMatch {
	this := WatchlistMonitorMatch{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WatchlistMonitorMatch) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistMonitorMatch) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WatchlistMonitorMatch) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WatchlistMonitorMatch) SetId(v string) {
	o.Id = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *WatchlistMonitorMatch) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistMonitorMatch) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *WatchlistMonitorMatch) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *WatchlistMonitorMatch) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o WatchlistMonitorMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WatchlistMonitorMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableWatchlistMonitorMatch struct {
	value *WatchlistMonitorMatch
	isSet bool
}

func (v NullableWatchlistMonitorMatch) Get() *WatchlistMonitorMatch {
	return v.value
}

func (v *NullableWatchlistMonitorMatch) Set(val *WatchlistMonitorMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchlistMonitorMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchlistMonitorMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchlistMonitorMatch(val *WatchlistMonitorMatch) *NullableWatchlistMonitorMatch {
	return &NullableWatchlistMonitorMatch{value: val, isSet: true}
}

func (v NullableWatchlistMonitorMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchlistMonitorMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckBuilder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckBuilder{}

// CheckBuilder struct for CheckBuilder
type CheckBuilder struct {
	// An array of webhook ids describing which webhooks to trigger for this check.
	WebhookIds []string `json:"webhook_ids,omitempty"`
	// The ID of the applicant to do the check on.
	ApplicantId string `json:"applicant_id"`
	// Send an applicant form to applicant to complete to proceed with check. Defaults to false.
	ApplicantProvidesData *bool `json:"applicant_provides_data,omitempty"`
	// Array of tags being assigned to this check.
	Tags []string `json:"tags,omitempty"`
	// For checks where `applicant_provides_data` is `true`, redirect to this URI when the applicant has submitted their data.
	RedirectUri *string `json:"redirect_uri,omitempty"`
	// An array of report names (strings).
	ReportNames []ReportName `json:"report_names"`
	// Optional. An array of document ids, for use with Document reports only. If omitted, the Document report will use the most recently uploaded document by default.
	DocumentIds []string `json:"document_ids,omitempty"`
	// Defaults to `true`. If set to `false`, you will only receive a response when all reports in your check have completed. 
	Asynchronous *bool `json:"asynchronous,omitempty"`
	// For checks where `applicant_provides_data` is `true`, applicant form will not be automatically sent if `suppress_form_emails` is set to `true`. You can manually send the form at any time after the check has been created, using the link found in the form_uri attribute of the check object. Write-only. Defaults to false. 
	SuppressFormEmails *bool `json:"suppress_form_emails,omitempty"`
	// Triggers responses for particular sub-results for sandbox Document reports.
	SubResult *string `json:"sub_result,omitempty"`
	// Array of names of particular reports to return consider as their results. This is a feature available in sandbox testing
	Consider []ReportName `json:"consider,omitempty"`
	UsDrivingLicence *UsDrivingLicenceBuilder `json:"us_driving_licence,omitempty"`
}

type _CheckBuilder CheckBuilder

// NewCheckBuilder instantiates a new CheckBuilder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckBuilder(applicantId string, reportNames []ReportName) *CheckBuilder {
	this := CheckBuilder{}
	this.ApplicantId = applicantId
	var applicantProvidesData bool = false
	this.ApplicantProvidesData = &applicantProvidesData
	this.ReportNames = reportNames
	var asynchronous bool = true
	this.Asynchronous = &asynchronous
	return &this
}

// NewCheckBuilderWithDefaults instantiates a new CheckBuilder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckBuilderWithDefaults() *CheckBuilder {
	this := CheckBuilder{}
	var applicantProvidesData bool = false
	this.ApplicantProvidesData = &applicantProvidesData
	var asynchronous bool = true
	this.Asynchronous = &asynchronous
	return &this
}

// GetWebhookIds returns the WebhookIds field value if set, zero value otherwise.
func (o *CheckBuilder) GetWebhookIds() []string {
	if o == nil || IsNil(o.WebhookIds) {
		var ret []string
		return ret
	}
	return o.WebhookIds
}

// GetWebhookIdsOk returns a tuple with the WebhookIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetWebhookIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.WebhookIds) {
		return nil, false
	}
	return o.WebhookIds, true
}

// HasWebhookIds returns a boolean if a field has been set.
func (o *CheckBuilder) HasWebhookIds() bool {
	if o != nil && !IsNil(o.WebhookIds) {
		return true
	}

	return false
}

// SetWebhookIds gets a reference to the given []string and assigns it to the WebhookIds field.
func (o *CheckBuilder) SetWebhookIds(v []string) {
	o.WebhookIds = v
}

// GetApplicantId returns the ApplicantId field value
func (o *CheckBuilder) GetApplicantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicantId
}

// GetApplicantIdOk returns a tuple with the ApplicantId field value
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetApplicantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicantId, true
}

// SetApplicantId sets field value
func (o *CheckBuilder) SetApplicantId(v string) {
	o.ApplicantId = v
}

// GetApplicantProvidesData returns the ApplicantProvidesData field value if set, zero value otherwise.
func (o *CheckBuilder) GetApplicantProvidesData() bool {
	if o == nil || IsNil(o.ApplicantProvidesData) {
		var ret bool
		return ret
	}
	return *o.ApplicantProvidesData
}

// GetApplicantProvidesDataOk returns a tuple with the ApplicantProvidesData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetApplicantProvidesDataOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplicantProvidesData) {
		return nil, false
	}
	return o.ApplicantProvidesData, true
}

// HasApplicantProvidesData returns a boolean if a field has been set.
func (o *CheckBuilder) HasApplicantProvidesData() bool {
	if o != nil && !IsNil(o.ApplicantProvidesData) {
		return true
	}

	return false
}

// SetApplicantProvidesData gets a reference to the given bool and assigns it to the ApplicantProvidesData field.
func (o *CheckBuilder) SetApplicantProvidesData(v bool) {
	o.ApplicantProvidesData = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CheckBuilder) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CheckBuilder) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CheckBuilder) SetTags(v []string) {
	o.Tags = v
}

// GetRedirectUri returns the RedirectUri field value if set, zero value otherwise.
func (o *CheckBuilder) GetRedirectUri() string {
	if o == nil || IsNil(o.RedirectUri) {
		var ret string
		return ret
	}
	return *o.RedirectUri
}

// GetRedirectUriOk returns a tuple with the RedirectUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetRedirectUriOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectUri) {
		return nil, false
	}
	return o.RedirectUri, true
}

// HasRedirectUri returns a boolean if a field has been set.
func (o *CheckBuilder) HasRedirectUri() bool {
	if o != nil && !IsNil(o.RedirectUri) {
		return true
	}

	return false
}

// SetRedirectUri gets a reference to the given string and assigns it to the RedirectUri field.
func (o *CheckBuilder) SetRedirectUri(v string) {
	o.RedirectUri = &v
}

// GetReportNames returns the ReportNames field value
func (o *CheckBuilder) GetReportNames() []ReportName {
	if o == nil {
		var ret []ReportName
		return ret
	}

	return o.ReportNames
}

// GetReportNamesOk returns a tuple with the ReportNames field value
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetReportNamesOk() ([]ReportName, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReportNames, true
}

// SetReportNames sets field value
func (o *CheckBuilder) SetReportNames(v []ReportName) {
	o.ReportNames = v
}

// GetDocumentIds returns the DocumentIds field value if set, zero value otherwise.
func (o *CheckBuilder) GetDocumentIds() []string {
	if o == nil || IsNil(o.DocumentIds) {
		var ret []string
		return ret
	}
	return o.DocumentIds
}

// GetDocumentIdsOk returns a tuple with the DocumentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetDocumentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DocumentIds) {
		return nil, false
	}
	return o.DocumentIds, true
}

// HasDocumentIds returns a boolean if a field has been set.
func (o *CheckBuilder) HasDocumentIds() bool {
	if o != nil && !IsNil(o.DocumentIds) {
		return true
	}

	return false
}

// SetDocumentIds gets a reference to the given []string and assigns it to the DocumentIds field.
func (o *CheckBuilder) SetDocumentIds(v []string) {
	o.DocumentIds = v
}

// GetAsynchronous returns the Asynchronous field value if set, zero value otherwise.
func (o *CheckBuilder) GetAsynchronous() bool {
	if o == nil || IsNil(o.Asynchronous) {
		var ret bool
		return ret
	}
	return *o.Asynchronous
}

// GetAsynchronousOk returns a tuple with the Asynchronous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetAsynchronousOk() (*bool, bool) {
	if o == nil || IsNil(o.Asynchronous) {
		return nil, false
	}
	return o.Asynchronous, true
}

// HasAsynchronous returns a boolean if a field has been set.
func (o *CheckBuilder) HasAsynchronous() bool {
	if o != nil && !IsNil(o.Asynchronous) {
		return true
	}

	return false
}

// SetAsynchronous gets a reference to the given bool and assigns it to the Asynchronous field.
func (o *CheckBuilder) SetAsynchronous(v bool) {
	o.Asynchronous = &v
}

// GetSuppressFormEmails returns the SuppressFormEmails field value if set, zero value otherwise.
func (o *CheckBuilder) GetSuppressFormEmails() bool {
	if o == nil || IsNil(o.SuppressFormEmails) {
		var ret bool
		return ret
	}
	return *o.SuppressFormEmails
}

// GetSuppressFormEmailsOk returns a tuple with the SuppressFormEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetSuppressFormEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.SuppressFormEmails) {
		return nil, false
	}
	return o.SuppressFormEmails, true
}

// HasSuppressFormEmails returns a boolean if a field has been set.
func (o *CheckBuilder) HasSuppressFormEmails() bool {
	if o != nil && !IsNil(o.SuppressFormEmails) {
		return true
	}

	return false
}

// SetSuppressFormEmails gets a reference to the given bool and assigns it to the SuppressFormEmails field.
func (o *CheckBuilder) SetSuppressFormEmails(v bool) {
	o.SuppressFormEmails = &v
}

// GetSubResult returns the SubResult field value if set, zero value otherwise.
func (o *CheckBuilder) GetSubResult() string {
	if o == nil || IsNil(o.SubResult) {
		var ret string
		return ret
	}
	return *o.SubResult
}

// GetSubResultOk returns a tuple with the SubResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetSubResultOk() (*string, bool) {
	if o == nil || IsNil(o.SubResult) {
		return nil, false
	}
	return o.SubResult, true
}

// HasSubResult returns a boolean if a field has been set.
func (o *CheckBuilder) HasSubResult() bool {
	if o != nil && !IsNil(o.SubResult) {
		return true
	}

	return false
}

// SetSubResult gets a reference to the given string and assigns it to the SubResult field.
func (o *CheckBuilder) SetSubResult(v string) {
	o.SubResult = &v
}

// GetConsider returns the Consider field value if set, zero value otherwise.
func (o *CheckBuilder) GetConsider() []ReportName {
	if o == nil || IsNil(o.Consider) {
		var ret []ReportName
		return ret
	}
	return o.Consider
}

// GetConsiderOk returns a tuple with the Consider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetConsiderOk() ([]ReportName, bool) {
	if o == nil || IsNil(o.Consider) {
		return nil, false
	}
	return o.Consider, true
}

// HasConsider returns a boolean if a field has been set.
func (o *CheckBuilder) HasConsider() bool {
	if o != nil && !IsNil(o.Consider) {
		return true
	}

	return false
}

// SetConsider gets a reference to the given []ReportName and assigns it to the Consider field.
func (o *CheckBuilder) SetConsider(v []ReportName) {
	o.Consider = v
}

// GetUsDrivingLicence returns the UsDrivingLicence field value if set, zero value otherwise.
func (o *CheckBuilder) GetUsDrivingLicence() UsDrivingLicenceBuilder {
	if o == nil || IsNil(o.UsDrivingLicence) {
		var ret UsDrivingLicenceBuilder
		return ret
	}
	return *o.UsDrivingLicence
}

// GetUsDrivingLicenceOk returns a tuple with the UsDrivingLicence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckBuilder) GetUsDrivingLicenceOk() (*UsDrivingLicenceBuilder, bool) {
	if o == nil || IsNil(o.UsDrivingLicence) {
		return nil, false
	}
	return o.UsDrivingLicence, true
}

// HasUsDrivingLicence returns a boolean if a field has been set.
func (o *CheckBuilder) HasUsDrivingLicence() bool {
	if o != nil && !IsNil(o.UsDrivingLicence) {
		return true
	}

	return false
}

// SetUsDrivingLicence gets a reference to the given UsDrivingLicenceBuilder and assigns it to the UsDrivingLicence field.
func (o *CheckBuilder) SetUsDrivingLicence(v UsDrivingLicenceBuilder) {
	o.UsDrivingLicence = &v
}

func (o CheckBuilder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckBuilder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WebhookIds) {
		toSerialize["webhook_ids"] = o.WebhookIds
	}
	toSerialize["applicant_id"] = o.ApplicantId
	if !IsNil(o.ApplicantProvidesData) {
		toSerialize["applicant_provides_data"] = o.ApplicantProvidesData
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.RedirectUri) {
		toSerialize["redirect_uri"] = o.RedirectUri
	}
	toSerialize["report_names"] = o.ReportNames
	if !IsNil(o.DocumentIds) {
		toSerialize["document_ids"] = o.DocumentIds
	}
	if !IsNil(o.Asynchronous) {
		toSerialize["asynchronous"] = o.Asynchronous
	}
	if !IsNil(o.SuppressFormEmails) {
		toSerialize["suppress_form_emails"] = o.SuppressFormEmails
	}
	if !IsNil(o.SubResult) {
		toSerialize["sub_result"] = o.SubResult
	}
	if !IsNil(o.Consider) {
		toSerialize["consider"] = o.Consider
	}
	if !IsNil(o.UsDrivingLicence) {
		toSerialize["us_driving_licence"] = o.UsDrivingLicence
	}
	return toSerialize, nil
}

func (o *CheckBuilder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"applicant_id",
		"report_names",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckBuilder := _CheckBuilder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckBuilder)

	if err != nil {
		return err
	}

	*o = CheckBuilder(varCheckBuilder)

	return err
}

type NullableCheckBuilder struct {
	value *CheckBuilder
	isSet bool
}

func (v NullableCheckBuilder) Get() *CheckBuilder {
	return v.value
}

func (v *NullableCheckBuilder) Set(val *CheckBuilder) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckBuilder) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckBuilder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckBuilder(val *CheckBuilder) *NullableCheckBuilder {
	return &NullableCheckBuilder{value: val, isSet: true}
}

func (v NullableCheckBuilder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckBuilder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



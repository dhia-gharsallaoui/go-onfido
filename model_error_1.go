/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Error1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Error1{}

// Error1 struct for Error1
type Error1 struct {
	// The unique identifier of the uploaded document
	DocumentId *string `json:"document_id,omitempty"`
	Error *ErrorProperties1 `json:"error,omitempty"`
}

// NewError1 instantiates a new Error1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError1() *Error1 {
	this := Error1{}
	return &this
}

// NewError1WithDefaults instantiates a new Error1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewError1WithDefaults() *Error1 {
	this := Error1{}
	return &this
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *Error1) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId) {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error1) GetDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *Error1) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *Error1) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Error1) GetError() ErrorProperties1 {
	if o == nil || IsNil(o.Error) {
		var ret ErrorProperties1
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error1) GetErrorOk() (*ErrorProperties1, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Error1) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorProperties1 and assigns it to the Error field.
func (o *Error1) SetError(v ErrorProperties1) {
	o.Error = &v
}

func (o Error1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Error1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentId) {
		toSerialize["document_id"] = o.DocumentId
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableError1 struct {
	value *Error1
	isSet bool
}

func (v NullableError1) Get() *Error1 {
	return v.value
}

func (v *NullableError1) Set(val *Error1) {
	v.value = val
	v.isSet = true
}

func (v NullableError1) IsSet() bool {
	return v.isSet
}

func (v *NullableError1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError1(val *Error1) *NullableError1 {
	return &NullableError1{value: val, isSet: true}
}

func (v NullableError1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WebhookEventType the model 'WebhookEventType'
type WebhookEventType string

// List of webhook_event_type
const (
	AUDIT_LOG_CREATED WebhookEventType = "audit_log.created"
	WATCHLIST_MONITOR_MATCHES_UPDATED WebhookEventType = "watchlist_monitor.matches_updated"
	WORKFLOW_RUN_COMPLETED WebhookEventType = "workflow_run.completed"
	WORKFLOW_TASK_STARTED WebhookEventType = "workflow_task.started"
	WORKFLOW_TASK_COMPLETED WebhookEventType = "workflow_task.completed"
	CHECK_STARTED WebhookEventType = "check.started"
	CHECK_REOPENED WebhookEventType = "check.reopened"
	CHECK_WITHDRAWN WebhookEventType = "check.withdrawn"
	CHECK_COMPLETED WebhookEventType = "check.completed"
	CHECK_FORM_COMPLETED WebhookEventType = "check.form_completed"
	REPORT_WITHDRAWN WebhookEventType = "report.withdrawn"
	REPORT_RESUMED WebhookEventType = "report.resumed"
	REPORT_CANCELLED WebhookEventType = "report.cancelled"
	REPORT_AWAITING_APPROVAL WebhookEventType = "report.awaiting_approval"
	REPORT_COMPLETED WebhookEventType = "report.completed"
	WORKFLOW_TIMELINE_FILE_CREATED WebhookEventType = "workflow_timeline_file.created"
	WORKFLOW_SIGNED_EVIDENCE_FILE_CREATED WebhookEventType = "workflow_signed_evidence_file.created"
)

// All allowed values of WebhookEventType enum
var AllowedWebhookEventTypeEnumValues = []WebhookEventType{
	"audit_log.created",
	"watchlist_monitor.matches_updated",
	"workflow_run.completed",
	"workflow_task.started",
	"workflow_task.completed",
	"check.started",
	"check.reopened",
	"check.withdrawn",
	"check.completed",
	"check.form_completed",
	"report.withdrawn",
	"report.resumed",
	"report.cancelled",
	"report.awaiting_approval",
	"report.completed",
	"workflow_timeline_file.created",
	"workflow_signed_evidence_file.created",
}

func (v *WebhookEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebhookEventType(value)
	for _, existing := range AllowedWebhookEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebhookEventType", value)
}

// NewWebhookEventTypeFromValue returns a pointer to a valid WebhookEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebhookEventTypeFromValue(v string) (*WebhookEventType, error) {
	ev := WebhookEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebhookEventType: valid values are %v", v, AllowedWebhookEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebhookEventType) IsValid() bool {
	for _, existing := range AllowedWebhookEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to webhook_event_type value
func (v WebhookEventType) Ptr() *WebhookEventType {
	return &v
}

type NullableWebhookEventType struct {
	value *WebhookEventType
	isSet bool
}

func (v NullableWebhookEventType) Get() *WebhookEventType {
	return v.value
}

func (v *NullableWebhookEventType) Set(val *WebhookEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookEventType(val *WebhookEventType) *NullableWebhookEventType {
	return &NullableWebhookEventType{value: val, isSet: true}
}

func (v NullableWebhookEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


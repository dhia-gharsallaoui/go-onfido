/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReportSubResult The sub_result of the report. It gives a more detailed result for document reports only, and will be null otherwise. Read-only.
type ReportSubResult string

// List of report_sub_result
const (
	CLEAR ReportSubResult = "clear"
	REJECTED ReportSubResult = "rejected"
	SUSPECTED ReportSubResult = "suspected"
	CAUTION ReportSubResult = "caution"
)

// All allowed values of ReportSubResult enum
var AllowedReportSubResultEnumValues = []ReportSubResult{
	"clear",
	"rejected",
	"suspected",
	"caution",
}

func (v *ReportSubResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportSubResult(value)
	for _, existing := range AllowedReportSubResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportSubResult", value)
}

// NewReportSubResultFromValue returns a pointer to a valid ReportSubResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportSubResultFromValue(v string) (*ReportSubResult, error) {
	ev := ReportSubResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportSubResult: valid values are %v", v, AllowedReportSubResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportSubResult) IsValid() bool {
	for _, existing := range AllowedReportSubResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to report_sub_result value
func (v ReportSubResult) Ptr() *ReportSubResult {
	return &v
}

type NullableReportSubResult struct {
	value *ReportSubResult
	isSet bool
}

func (v NullableReportSubResult) Get() *ReportSubResult {
	return v.value
}

func (v *NullableReportSubResult) Set(val *ReportSubResult) {
	v.value = val
	v.isSet = true
}

func (v NullableReportSubResult) IsSet() bool {
	return v.isSet
}

func (v *NullableReportSubResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportSubResult(val *ReportSubResult) *NullableReportSubResult {
	return &NullableReportSubResult{value: val, isSet: true}
}

func (v NullableReportSubResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportSubResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


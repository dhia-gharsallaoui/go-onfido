/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UsDrivingLicenceShared type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsDrivingLicenceShared{}

// UsDrivingLicenceShared An object that contains all accepted fields for the Driver's License Data Verification report.
type UsDrivingLicenceShared struct {
	// Driving licence ID number
	IdNumber string `json:"id_number"`
	// Two letter code of issuing state (state-issued driving licenses only)
	IssueState string `json:"issue_state" validate:"regexp=^[A-Z]{2}$"`
	// Line 1 of the address
	AddressLine1 *string `json:"address_line_1,omitempty"`
	// Line 2 of the address
	AddressLine2 *string `json:"address_line_2,omitempty"`
	// The city of the owner's address
	City *string `json:"city,omitempty"`
	// Date of birth in yyyy-mm-dd format
	DateOfBirth *string `json:"date_of_birth,omitempty"`
	// Document category.
	DocumentCategory *string `json:"document_category,omitempty"`
	// Expiration date of the driving licence in yyyy-mm-dd format
	ExpirationDate *string `json:"expiration_date,omitempty"`
	// Eye color code.
	EyeColorCode *string `json:"eye_color_code,omitempty"`
	// The owner's first name
	FirstName *string `json:"first_name,omitempty"`
	Gender *string `json:"gender,omitempty"`
	// Issue date in yyyy-mm-dd format
	IssueDate *string `json:"issue_date,omitempty"`
	// The owner's surname
	LastName *string `json:"last_name,omitempty"`
	// The owner's middle name
	MiddleName *string `json:"middle_name,omitempty"`
	// The owner's name suffix
	NameSuffix *string `json:"name_suffix,omitempty"`
	// The postcode or ZIP of the owner's address
	PostalCode *string `json:"postal_code,omitempty"`
	// 2-characters state code
	State *string `json:"state,omitempty" validate:"regexp=^[A-Z]{2}$"`
	// Weight in pounds
	WeightMeasure *int32 `json:"weight_measure,omitempty"`
}

type _UsDrivingLicenceShared UsDrivingLicenceShared

// NewUsDrivingLicenceShared instantiates a new UsDrivingLicenceShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsDrivingLicenceShared(idNumber string, issueState string) *UsDrivingLicenceShared {
	this := UsDrivingLicenceShared{}
	this.IdNumber = idNumber
	this.IssueState = issueState
	return &this
}

// NewUsDrivingLicenceSharedWithDefaults instantiates a new UsDrivingLicenceShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsDrivingLicenceSharedWithDefaults() *UsDrivingLicenceShared {
	this := UsDrivingLicenceShared{}
	return &this
}

// GetIdNumber returns the IdNumber field value
func (o *UsDrivingLicenceShared) GetIdNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdNumber
}

// GetIdNumberOk returns a tuple with the IdNumber field value
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetIdNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdNumber, true
}

// SetIdNumber sets field value
func (o *UsDrivingLicenceShared) SetIdNumber(v string) {
	o.IdNumber = v
}

// GetIssueState returns the IssueState field value
func (o *UsDrivingLicenceShared) GetIssueState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueState
}

// GetIssueStateOk returns a tuple with the IssueState field value
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetIssueStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueState, true
}

// SetIssueState sets field value
func (o *UsDrivingLicenceShared) SetIssueState(v string) {
	o.IssueState = v
}

// GetAddressLine1 returns the AddressLine1 field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetAddressLine1() string {
	if o == nil || IsNil(o.AddressLine1) {
		var ret string
		return ret
	}
	return *o.AddressLine1
}

// GetAddressLine1Ok returns a tuple with the AddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetAddressLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine1) {
		return nil, false
	}
	return o.AddressLine1, true
}

// HasAddressLine1 returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasAddressLine1() bool {
	if o != nil && !IsNil(o.AddressLine1) {
		return true
	}

	return false
}

// SetAddressLine1 gets a reference to the given string and assigns it to the AddressLine1 field.
func (o *UsDrivingLicenceShared) SetAddressLine1(v string) {
	o.AddressLine1 = &v
}

// GetAddressLine2 returns the AddressLine2 field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetAddressLine2() string {
	if o == nil || IsNil(o.AddressLine2) {
		var ret string
		return ret
	}
	return *o.AddressLine2
}

// GetAddressLine2Ok returns a tuple with the AddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine2) {
		return nil, false
	}
	return o.AddressLine2, true
}

// HasAddressLine2 returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasAddressLine2() bool {
	if o != nil && !IsNil(o.AddressLine2) {
		return true
	}

	return false
}

// SetAddressLine2 gets a reference to the given string and assigns it to the AddressLine2 field.
func (o *UsDrivingLicenceShared) SetAddressLine2(v string) {
	o.AddressLine2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *UsDrivingLicenceShared) SetCity(v string) {
	o.City = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetDateOfBirth() string {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetDateOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *UsDrivingLicenceShared) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetDocumentCategory returns the DocumentCategory field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetDocumentCategory() string {
	if o == nil || IsNil(o.DocumentCategory) {
		var ret string
		return ret
	}
	return *o.DocumentCategory
}

// GetDocumentCategoryOk returns a tuple with the DocumentCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetDocumentCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentCategory) {
		return nil, false
	}
	return o.DocumentCategory, true
}

// HasDocumentCategory returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasDocumentCategory() bool {
	if o != nil && !IsNil(o.DocumentCategory) {
		return true
	}

	return false
}

// SetDocumentCategory gets a reference to the given string and assigns it to the DocumentCategory field.
func (o *UsDrivingLicenceShared) SetDocumentCategory(v string) {
	o.DocumentCategory = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *UsDrivingLicenceShared) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetEyeColorCode returns the EyeColorCode field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetEyeColorCode() string {
	if o == nil || IsNil(o.EyeColorCode) {
		var ret string
		return ret
	}
	return *o.EyeColorCode
}

// GetEyeColorCodeOk returns a tuple with the EyeColorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetEyeColorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EyeColorCode) {
		return nil, false
	}
	return o.EyeColorCode, true
}

// HasEyeColorCode returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasEyeColorCode() bool {
	if o != nil && !IsNil(o.EyeColorCode) {
		return true
	}

	return false
}

// SetEyeColorCode gets a reference to the given string and assigns it to the EyeColorCode field.
func (o *UsDrivingLicenceShared) SetEyeColorCode(v string) {
	o.EyeColorCode = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UsDrivingLicenceShared) SetFirstName(v string) {
	o.FirstName = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *UsDrivingLicenceShared) SetGender(v string) {
	o.Gender = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetIssueDate() string {
	if o == nil || IsNil(o.IssueDate) {
		var ret string
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetIssueDateOk() (*string, bool) {
	if o == nil || IsNil(o.IssueDate) {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasIssueDate() bool {
	if o != nil && !IsNil(o.IssueDate) {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given string and assigns it to the IssueDate field.
func (o *UsDrivingLicenceShared) SetIssueDate(v string) {
	o.IssueDate = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UsDrivingLicenceShared) SetLastName(v string) {
	o.LastName = &v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetMiddleName() string {
	if o == nil || IsNil(o.MiddleName) {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetMiddleNameOk() (*string, bool) {
	if o == nil || IsNil(o.MiddleName) {
		return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasMiddleName() bool {
	if o != nil && !IsNil(o.MiddleName) {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *UsDrivingLicenceShared) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetNameSuffix returns the NameSuffix field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetNameSuffix() string {
	if o == nil || IsNil(o.NameSuffix) {
		var ret string
		return ret
	}
	return *o.NameSuffix
}

// GetNameSuffixOk returns a tuple with the NameSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetNameSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.NameSuffix) {
		return nil, false
	}
	return o.NameSuffix, true
}

// HasNameSuffix returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasNameSuffix() bool {
	if o != nil && !IsNil(o.NameSuffix) {
		return true
	}

	return false
}

// SetNameSuffix gets a reference to the given string and assigns it to the NameSuffix field.
func (o *UsDrivingLicenceShared) SetNameSuffix(v string) {
	o.NameSuffix = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *UsDrivingLicenceShared) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *UsDrivingLicenceShared) SetState(v string) {
	o.State = &v
}

// GetWeightMeasure returns the WeightMeasure field value if set, zero value otherwise.
func (o *UsDrivingLicenceShared) GetWeightMeasure() int32 {
	if o == nil || IsNil(o.WeightMeasure) {
		var ret int32
		return ret
	}
	return *o.WeightMeasure
}

// GetWeightMeasureOk returns a tuple with the WeightMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceShared) GetWeightMeasureOk() (*int32, bool) {
	if o == nil || IsNil(o.WeightMeasure) {
		return nil, false
	}
	return o.WeightMeasure, true
}

// HasWeightMeasure returns a boolean if a field has been set.
func (o *UsDrivingLicenceShared) HasWeightMeasure() bool {
	if o != nil && !IsNil(o.WeightMeasure) {
		return true
	}

	return false
}

// SetWeightMeasure gets a reference to the given int32 and assigns it to the WeightMeasure field.
func (o *UsDrivingLicenceShared) SetWeightMeasure(v int32) {
	o.WeightMeasure = &v
}

func (o UsDrivingLicenceShared) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsDrivingLicenceShared) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id_number"] = o.IdNumber
	toSerialize["issue_state"] = o.IssueState
	if !IsNil(o.AddressLine1) {
		toSerialize["address_line_1"] = o.AddressLine1
	}
	if !IsNil(o.AddressLine2) {
		toSerialize["address_line_2"] = o.AddressLine2
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if !IsNil(o.DocumentCategory) {
		toSerialize["document_category"] = o.DocumentCategory
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if !IsNil(o.EyeColorCode) {
		toSerialize["eye_color_code"] = o.EyeColorCode
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.IssueDate) {
		toSerialize["issue_date"] = o.IssueDate
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.MiddleName) {
		toSerialize["middle_name"] = o.MiddleName
	}
	if !IsNil(o.NameSuffix) {
		toSerialize["name_suffix"] = o.NameSuffix
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.WeightMeasure) {
		toSerialize["weight_measure"] = o.WeightMeasure
	}
	return toSerialize, nil
}

func (o *UsDrivingLicenceShared) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id_number",
		"issue_state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsDrivingLicenceShared := _UsDrivingLicenceShared{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsDrivingLicenceShared)

	if err != nil {
		return err
	}

	*o = UsDrivingLicenceShared(varUsDrivingLicenceShared)

	return err
}

type NullableUsDrivingLicenceShared struct {
	value *UsDrivingLicenceShared
	isSet bool
}

func (v NullableUsDrivingLicenceShared) Get() *UsDrivingLicenceShared {
	return v.value
}

func (v *NullableUsDrivingLicenceShared) Set(val *UsDrivingLicenceShared) {
	v.value = val
	v.isSet = true
}

func (v NullableUsDrivingLicenceShared) IsSet() bool {
	return v.isSet
}

func (v *NullableUsDrivingLicenceShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsDrivingLicenceShared(val *UsDrivingLicenceShared) *NullableUsDrivingLicenceShared {
	return &NullableUsDrivingLicenceShared{value: val, isSet: true}
}

func (v NullableUsDrivingLicenceShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsDrivingLicenceShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



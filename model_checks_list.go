/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChecksList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChecksList{}

// ChecksList struct for ChecksList
type ChecksList struct {
	Checks []Check `json:"checks"`
}

type _ChecksList ChecksList

// NewChecksList instantiates a new ChecksList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChecksList(checks []Check) *ChecksList {
	this := ChecksList{}
	this.Checks = checks
	return &this
}

// NewChecksListWithDefaults instantiates a new ChecksList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChecksListWithDefaults() *ChecksList {
	this := ChecksList{}
	return &this
}

// GetChecks returns the Checks field value
func (o *ChecksList) GetChecks() []Check {
	if o == nil {
		var ret []Check
		return ret
	}

	return o.Checks
}

// GetChecksOk returns a tuple with the Checks field value
// and a boolean to check if the value has been set.
func (o *ChecksList) GetChecksOk() ([]Check, bool) {
	if o == nil {
		return nil, false
	}
	return o.Checks, true
}

// SetChecks sets field value
func (o *ChecksList) SetChecks(v []Check) {
	o.Checks = v
}

func (o ChecksList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChecksList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["checks"] = o.Checks
	return toSerialize, nil
}

func (o *ChecksList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"checks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChecksList := _ChecksList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChecksList)

	if err != nil {
		return err
	}

	*o = ChecksList(varChecksList)

	return err
}

type NullableChecksList struct {
	value *ChecksList
	isSet bool
}

func (v NullableChecksList) Get() *ChecksList {
	return v.value
}

func (v *NullableChecksList) Set(val *ChecksList) {
	v.value = val
	v.isSet = true
}

func (v NullableChecksList) IsSet() bool {
	return v.isSet
}

func (v *NullableChecksList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChecksList(val *ChecksList) *NullableChecksList {
	return &NullableChecksList{value: val, isSet: true}
}

func (v NullableChecksList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChecksList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



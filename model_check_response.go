/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CheckResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckResponse{}

// CheckResponse struct for CheckResponse
type CheckResponse struct {
	// The unique identifier for the check.
	Id string `json:"id"`
	// The date and time when this check was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The uri of this resource.
	Href *string `json:"href,omitempty"`
	// The current state of the check in the checking process.
	Status *string `json:"status,omitempty"`
	// The overall result of the check, based on the results of the constituent reports.
	Result *string `json:"result,omitempty"`
	// A link to the applicant form, if `applicant_provides_data` is `true`.
	FormUri *string `json:"form_uri,omitempty"`
	// A link to the corresponding results page on the Onfido dashboard.
	ResultsUri *string `json:"results_uri,omitempty"`
	// An array of report ids.
	ReportIds []string `json:"report_ids,omitempty"`
	// Indicates whether the object was created in the sandbox or not.
	Sandbox *bool `json:"sandbox,omitempty"`
}

type _CheckResponse CheckResponse

// NewCheckResponse instantiates a new CheckResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckResponse(id string) *CheckResponse {
	this := CheckResponse{}
	this.Id = id
	return &this
}

// NewCheckResponseWithDefaults instantiates a new CheckResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckResponseWithDefaults() *CheckResponse {
	this := CheckResponse{}
	return &this
}

// GetId returns the Id field value
func (o *CheckResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CheckResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CheckResponse) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CheckResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CheckResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *CheckResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *CheckResponse) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResponse) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *CheckResponse) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *CheckResponse) SetHref(v string) {
	o.Href = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CheckResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CheckResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CheckResponse) SetStatus(v string) {
	o.Status = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *CheckResponse) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResponse) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *CheckResponse) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *CheckResponse) SetResult(v string) {
	o.Result = &v
}

// GetFormUri returns the FormUri field value if set, zero value otherwise.
func (o *CheckResponse) GetFormUri() string {
	if o == nil || IsNil(o.FormUri) {
		var ret string
		return ret
	}
	return *o.FormUri
}

// GetFormUriOk returns a tuple with the FormUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResponse) GetFormUriOk() (*string, bool) {
	if o == nil || IsNil(o.FormUri) {
		return nil, false
	}
	return o.FormUri, true
}

// HasFormUri returns a boolean if a field has been set.
func (o *CheckResponse) HasFormUri() bool {
	if o != nil && !IsNil(o.FormUri) {
		return true
	}

	return false
}

// SetFormUri gets a reference to the given string and assigns it to the FormUri field.
func (o *CheckResponse) SetFormUri(v string) {
	o.FormUri = &v
}

// GetResultsUri returns the ResultsUri field value if set, zero value otherwise.
func (o *CheckResponse) GetResultsUri() string {
	if o == nil || IsNil(o.ResultsUri) {
		var ret string
		return ret
	}
	return *o.ResultsUri
}

// GetResultsUriOk returns a tuple with the ResultsUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResponse) GetResultsUriOk() (*string, bool) {
	if o == nil || IsNil(o.ResultsUri) {
		return nil, false
	}
	return o.ResultsUri, true
}

// HasResultsUri returns a boolean if a field has been set.
func (o *CheckResponse) HasResultsUri() bool {
	if o != nil && !IsNil(o.ResultsUri) {
		return true
	}

	return false
}

// SetResultsUri gets a reference to the given string and assigns it to the ResultsUri field.
func (o *CheckResponse) SetResultsUri(v string) {
	o.ResultsUri = &v
}

// GetReportIds returns the ReportIds field value if set, zero value otherwise.
func (o *CheckResponse) GetReportIds() []string {
	if o == nil || IsNil(o.ReportIds) {
		var ret []string
		return ret
	}
	return o.ReportIds
}

// GetReportIdsOk returns a tuple with the ReportIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResponse) GetReportIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReportIds) {
		return nil, false
	}
	return o.ReportIds, true
}

// HasReportIds returns a boolean if a field has been set.
func (o *CheckResponse) HasReportIds() bool {
	if o != nil && !IsNil(o.ReportIds) {
		return true
	}

	return false
}

// SetReportIds gets a reference to the given []string and assigns it to the ReportIds field.
func (o *CheckResponse) SetReportIds(v []string) {
	o.ReportIds = v
}

// GetSandbox returns the Sandbox field value if set, zero value otherwise.
func (o *CheckResponse) GetSandbox() bool {
	if o == nil || IsNil(o.Sandbox) {
		var ret bool
		return ret
	}
	return *o.Sandbox
}

// GetSandboxOk returns a tuple with the Sandbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResponse) GetSandboxOk() (*bool, bool) {
	if o == nil || IsNil(o.Sandbox) {
		return nil, false
	}
	return o.Sandbox, true
}

// HasSandbox returns a boolean if a field has been set.
func (o *CheckResponse) HasSandbox() bool {
	if o != nil && !IsNil(o.Sandbox) {
		return true
	}

	return false
}

// SetSandbox gets a reference to the given bool and assigns it to the Sandbox field.
func (o *CheckResponse) SetSandbox(v bool) {
	o.Sandbox = &v
}

func (o CheckResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.FormUri) {
		toSerialize["form_uri"] = o.FormUri
	}
	if !IsNil(o.ResultsUri) {
		toSerialize["results_uri"] = o.ResultsUri
	}
	if !IsNil(o.ReportIds) {
		toSerialize["report_ids"] = o.ReportIds
	}
	if !IsNil(o.Sandbox) {
		toSerialize["sandbox"] = o.Sandbox
	}
	return toSerialize, nil
}

func (o *CheckResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckResponse := _CheckResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckResponse)

	if err != nil {
		return err
	}

	*o = CheckResponse(varCheckResponse)

	return err
}

type NullableCheckResponse struct {
	value *CheckResponse
	isSet bool
}

func (v NullableCheckResponse) Get() *CheckResponse {
	return v.value
}

func (v *NullableCheckResponse) Set(val *CheckResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckResponse(val *CheckResponse) *NullableCheckResponse {
	return &NullableCheckResponse{value: val, isSet: true}
}

func (v NullableCheckResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



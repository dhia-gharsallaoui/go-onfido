/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UsDrivingLicenceBreakdownAddressBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsDrivingLicenceBreakdownAddressBreakdown{}

// UsDrivingLicenceBreakdownAddressBreakdown struct for UsDrivingLicenceBreakdownAddressBreakdown
type UsDrivingLicenceBreakdownAddressBreakdown struct {
	City *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"city,omitempty"`
	Line1 *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"line_1,omitempty"`
	Line2 *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"line_2,omitempty"`
	StateCode *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"state_code,omitempty"`
	Zip4 *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"zip4,omitempty"`
	Zip5 *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"zip5,omitempty"`
}

// NewUsDrivingLicenceBreakdownAddressBreakdown instantiates a new UsDrivingLicenceBreakdownAddressBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsDrivingLicenceBreakdownAddressBreakdown() *UsDrivingLicenceBreakdownAddressBreakdown {
	this := UsDrivingLicenceBreakdownAddressBreakdown{}
	return &this
}

// NewUsDrivingLicenceBreakdownAddressBreakdownWithDefaults instantiates a new UsDrivingLicenceBreakdownAddressBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsDrivingLicenceBreakdownAddressBreakdownWithDefaults() *UsDrivingLicenceBreakdownAddressBreakdown {
	this := UsDrivingLicenceBreakdownAddressBreakdown{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetCity() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.City) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetCityOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the City field.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) SetCity(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.City = &v
}

// GetLine1 returns the Line1 field value if set, zero value otherwise.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetLine1() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Line1) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetLine1Ok() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Line1) {
		return nil, false
	}
	return o.Line1, true
}

// HasLine1 returns a boolean if a field has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) HasLine1() bool {
	if o != nil && !IsNil(o.Line1) {
		return true
	}

	return false
}

// SetLine1 gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Line1 field.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) SetLine1(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Line1 = &v
}

// GetLine2 returns the Line2 field value if set, zero value otherwise.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetLine2() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Line2) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Line2
}

// GetLine2Ok returns a tuple with the Line2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetLine2Ok() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Line2) {
		return nil, false
	}
	return o.Line2, true
}

// HasLine2 returns a boolean if a field has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) HasLine2() bool {
	if o != nil && !IsNil(o.Line2) {
		return true
	}

	return false
}

// SetLine2 gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Line2 field.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) SetLine2(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Line2 = &v
}

// GetStateCode returns the StateCode field value if set, zero value otherwise.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetStateCode() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.StateCode) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.StateCode
}

// GetStateCodeOk returns a tuple with the StateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetStateCodeOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.StateCode) {
		return nil, false
	}
	return o.StateCode, true
}

// HasStateCode returns a boolean if a field has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) HasStateCode() bool {
	if o != nil && !IsNil(o.StateCode) {
		return true
	}

	return false
}

// SetStateCode gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the StateCode field.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) SetStateCode(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.StateCode = &v
}

// GetZip4 returns the Zip4 field value if set, zero value otherwise.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetZip4() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Zip4) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Zip4
}

// GetZip4Ok returns a tuple with the Zip4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetZip4Ok() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Zip4) {
		return nil, false
	}
	return o.Zip4, true
}

// HasZip4 returns a boolean if a field has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) HasZip4() bool {
	if o != nil && !IsNil(o.Zip4) {
		return true
	}

	return false
}

// SetZip4 gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Zip4 field.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) SetZip4(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Zip4 = &v
}

// GetZip5 returns the Zip5 field value if set, zero value otherwise.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetZip5() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Zip5) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Zip5
}

// GetZip5Ok returns a tuple with the Zip5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) GetZip5Ok() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Zip5) {
		return nil, false
	}
	return o.Zip5, true
}

// HasZip5 returns a boolean if a field has been set.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) HasZip5() bool {
	if o != nil && !IsNil(o.Zip5) {
		return true
	}

	return false
}

// SetZip5 gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Zip5 field.
func (o *UsDrivingLicenceBreakdownAddressBreakdown) SetZip5(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Zip5 = &v
}

func (o UsDrivingLicenceBreakdownAddressBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsDrivingLicenceBreakdownAddressBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Line1) {
		toSerialize["line_1"] = o.Line1
	}
	if !IsNil(o.Line2) {
		toSerialize["line_2"] = o.Line2
	}
	if !IsNil(o.StateCode) {
		toSerialize["state_code"] = o.StateCode
	}
	if !IsNil(o.Zip4) {
		toSerialize["zip4"] = o.Zip4
	}
	if !IsNil(o.Zip5) {
		toSerialize["zip5"] = o.Zip5
	}
	return toSerialize, nil
}

type NullableUsDrivingLicenceBreakdownAddressBreakdown struct {
	value *UsDrivingLicenceBreakdownAddressBreakdown
	isSet bool
}

func (v NullableUsDrivingLicenceBreakdownAddressBreakdown) Get() *UsDrivingLicenceBreakdownAddressBreakdown {
	return v.value
}

func (v *NullableUsDrivingLicenceBreakdownAddressBreakdown) Set(val *UsDrivingLicenceBreakdownAddressBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableUsDrivingLicenceBreakdownAddressBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableUsDrivingLicenceBreakdownAddressBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsDrivingLicenceBreakdownAddressBreakdown(val *UsDrivingLicenceBreakdownAddressBreakdown) *NullableUsDrivingLicenceBreakdownAddressBreakdown {
	return &NullableUsDrivingLicenceBreakdownAddressBreakdown{value: val, isSet: true}
}

func (v NullableUsDrivingLicenceBreakdownAddressBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsDrivingLicenceBreakdownAddressBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



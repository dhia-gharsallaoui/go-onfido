/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WatchlistMonitorShared type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WatchlistMonitorShared{}

// WatchlistMonitorShared struct for WatchlistMonitorShared
type WatchlistMonitorShared struct {
	// The ID for the applicant associated with the monitor.
	ApplicantId string `json:"applicant_id"`
	// The name of the report type the monitor creates.
	ReportName string `json:"report_name"`
	// A list of tags associated with this monitor. These tags will be applied to each check this monitor creates.
	Tags []string `json:"tags,omitempty"`
}

type _WatchlistMonitorShared WatchlistMonitorShared

// NewWatchlistMonitorShared instantiates a new WatchlistMonitorShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchlistMonitorShared(applicantId string, reportName string) *WatchlistMonitorShared {
	this := WatchlistMonitorShared{}
	this.ApplicantId = applicantId
	this.ReportName = reportName
	return &this
}

// NewWatchlistMonitorSharedWithDefaults instantiates a new WatchlistMonitorShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchlistMonitorSharedWithDefaults() *WatchlistMonitorShared {
	this := WatchlistMonitorShared{}
	return &this
}

// GetApplicantId returns the ApplicantId field value
func (o *WatchlistMonitorShared) GetApplicantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicantId
}

// GetApplicantIdOk returns a tuple with the ApplicantId field value
// and a boolean to check if the value has been set.
func (o *WatchlistMonitorShared) GetApplicantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicantId, true
}

// SetApplicantId sets field value
func (o *WatchlistMonitorShared) SetApplicantId(v string) {
	o.ApplicantId = v
}

// GetReportName returns the ReportName field value
func (o *WatchlistMonitorShared) GetReportName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReportName
}

// GetReportNameOk returns a tuple with the ReportName field value
// and a boolean to check if the value has been set.
func (o *WatchlistMonitorShared) GetReportNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportName, true
}

// SetReportName sets field value
func (o *WatchlistMonitorShared) SetReportName(v string) {
	o.ReportName = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *WatchlistMonitorShared) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistMonitorShared) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *WatchlistMonitorShared) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *WatchlistMonitorShared) SetTags(v []string) {
	o.Tags = v
}

func (o WatchlistMonitorShared) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WatchlistMonitorShared) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicant_id"] = o.ApplicantId
	toSerialize["report_name"] = o.ReportName
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *WatchlistMonitorShared) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"applicant_id",
		"report_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWatchlistMonitorShared := _WatchlistMonitorShared{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWatchlistMonitorShared)

	if err != nil {
		return err
	}

	*o = WatchlistMonitorShared(varWatchlistMonitorShared)

	return err
}

type NullableWatchlistMonitorShared struct {
	value *WatchlistMonitorShared
	isSet bool
}

func (v NullableWatchlistMonitorShared) Get() *WatchlistMonitorShared {
	return v.value
}

func (v *NullableWatchlistMonitorShared) Set(val *WatchlistMonitorShared) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchlistMonitorShared) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchlistMonitorShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchlistMonitorShared(val *WatchlistMonitorShared) *NullableWatchlistMonitorShared {
	return &NullableWatchlistMonitorShared{value: val, isSet: true}
}

func (v NullableWatchlistMonitorShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchlistMonitorShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



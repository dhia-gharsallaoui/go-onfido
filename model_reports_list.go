/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReportsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportsList{}

// ReportsList struct for ReportsList
type ReportsList struct {
	Reports []Report `json:"reports"`
}

type _ReportsList ReportsList

// NewReportsList instantiates a new ReportsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportsList(reports []Report) *ReportsList {
	this := ReportsList{}
	this.Reports = reports
	return &this
}

// NewReportsListWithDefaults instantiates a new ReportsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportsListWithDefaults() *ReportsList {
	this := ReportsList{}
	return &this
}

// GetReports returns the Reports field value
func (o *ReportsList) GetReports() []Report {
	if o == nil {
		var ret []Report
		return ret
	}

	return o.Reports
}

// GetReportsOk returns a tuple with the Reports field value
// and a boolean to check if the value has been set.
func (o *ReportsList) GetReportsOk() ([]Report, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reports, true
}

// SetReports sets field value
func (o *ReportsList) SetReports(v []Report) {
	o.Reports = v
}

func (o ReportsList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reports"] = o.Reports
	return toSerialize, nil
}

func (o *ReportsList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reports",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportsList := _ReportsList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportsList)

	if err != nil {
		return err
	}

	*o = ReportsList(varReportsList)

	return err
}

type NullableReportsList struct {
	value *ReportsList
	isSet bool
}

func (v NullableReportsList) Get() *ReportsList {
	return v.value
}

func (v *NullableReportsList) Set(val *ReportsList) {
	v.value = val
	v.isSet = true
}

func (v NullableReportsList) IsSet() bool {
	return v.isSet
}

func (v *NullableReportsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportsList(val *ReportsList) *NullableReportsList {
	return &NullableReportsList{value: val, isSet: true}
}

func (v NullableReportsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



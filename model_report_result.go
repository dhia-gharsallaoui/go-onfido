/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReportResult The result of the report. Read-only.
type ReportResult string

// List of report_result
const (
	CLEAR_REPORT ReportResult = "clear"
	CONSIDER ReportResult = "consider"
	UNIDENTIFIED ReportResult = "unidentified"
)

// All allowed values of ReportResult enum
var AllowedReportResultEnumValues = []ReportResult{
	"clear",
	"consider",
	"unidentified",
}

func (v *ReportResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportResult(value)
	for _, existing := range AllowedReportResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportResult", value)
}

// NewReportResultFromValue returns a pointer to a valid ReportResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportResultFromValue(v string) (*ReportResult, error) {
	ev := ReportResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportResult: valid values are %v", v, AllowedReportResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportResult) IsValid() bool {
	for _, existing := range AllowedReportResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to report_result value
func (v ReportResult) Ptr() *ReportResult {
	return &v
}

type NullableReportResult struct {
	value *ReportResult
	isSet bool
}

func (v NullableReportResult) Get() *ReportResult {
	return v.value
}

func (v *NullableReportResult) Set(val *ReportResult) {
	v.value = val
	v.isSet = true
}

func (v NullableReportResult) IsSet() bool {
	return v.isSet
}

func (v *NullableReportResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportResult(val *ReportResult) *NullableReportResult {
	return &NullableReportResult{value: val, isSet: true}
}

func (v NullableReportResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


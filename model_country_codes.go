/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CountryCodes the model 'CountryCodes'
type CountryCodes string

// List of country_codes
const (
	ABW CountryCodes = "ABW"
	AFG CountryCodes = "AFG"
	AGO CountryCodes = "AGO"
	AIA CountryCodes = "AIA"
	ALA CountryCodes = "ALA"
	ALB CountryCodes = "ALB"
	AND CountryCodes = "AND"
	ARE CountryCodes = "ARE"
	ARG CountryCodes = "ARG"
	ARM CountryCodes = "ARM"
	ASM CountryCodes = "ASM"
	ATA CountryCodes = "ATA"
	ATF CountryCodes = "ATF"
	ATG CountryCodes = "ATG"
	AUS CountryCodes = "AUS"
	AUT CountryCodes = "AUT"
	AZE CountryCodes = "AZE"
	BDI CountryCodes = "BDI"
	BEL CountryCodes = "BEL"
	BEN CountryCodes = "BEN"
	BES CountryCodes = "BES"
	BFA CountryCodes = "BFA"
	BGD CountryCodes = "BGD"
	BGR CountryCodes = "BGR"
	BHR CountryCodes = "BHR"
	BHS CountryCodes = "BHS"
	BIH CountryCodes = "BIH"
	BLM CountryCodes = "BLM"
	BLR CountryCodes = "BLR"
	BLZ CountryCodes = "BLZ"
	BMU CountryCodes = "BMU"
	BOL CountryCodes = "BOL"
	BRA CountryCodes = "BRA"
	BRB CountryCodes = "BRB"
	BRN CountryCodes = "BRN"
	BTN CountryCodes = "BTN"
	BVT CountryCodes = "BVT"
	BWA CountryCodes = "BWA"
	CAF CountryCodes = "CAF"
	CAN CountryCodes = "CAN"
	CCK CountryCodes = "CCK"
	CHE CountryCodes = "CHE"
	CHL CountryCodes = "CHL"
	CHN CountryCodes = "CHN"
	CIV CountryCodes = "CIV"
	CMR CountryCodes = "CMR"
	COD CountryCodes = "COD"
	COG CountryCodes = "COG"
	COK CountryCodes = "COK"
	COL CountryCodes = "COL"
	COM CountryCodes = "COM"
	CPV CountryCodes = "CPV"
	CRI CountryCodes = "CRI"
	CUB CountryCodes = "CUB"
	CUW CountryCodes = "CUW"
	CXR CountryCodes = "CXR"
	CYM CountryCodes = "CYM"
	CYP CountryCodes = "CYP"
	CZE CountryCodes = "CZE"
	DEU CountryCodes = "DEU"
	DJI CountryCodes = "DJI"
	DMA CountryCodes = "DMA"
	DNK CountryCodes = "DNK"
	DOM CountryCodes = "DOM"
	DZA CountryCodes = "DZA"
	ECU CountryCodes = "ECU"
	EGY CountryCodes = "EGY"
	ERI CountryCodes = "ERI"
	ESH CountryCodes = "ESH"
	ESP CountryCodes = "ESP"
	EST CountryCodes = "EST"
	ETH CountryCodes = "ETH"
	FIN CountryCodes = "FIN"
	FJI CountryCodes = "FJI"
	FLK CountryCodes = "FLK"
	FRA CountryCodes = "FRA"
	FRO CountryCodes = "FRO"
	FSM CountryCodes = "FSM"
	GAB CountryCodes = "GAB"
	GBR CountryCodes = "GBR"
	GEO CountryCodes = "GEO"
	GGY CountryCodes = "GGY"
	GHA CountryCodes = "GHA"
	GIB CountryCodes = "GIB"
	GIN CountryCodes = "GIN"
	GLP CountryCodes = "GLP"
	GMB CountryCodes = "GMB"
	GNB CountryCodes = "GNB"
	GNQ CountryCodes = "GNQ"
	GRC CountryCodes = "GRC"
	GRD CountryCodes = "GRD"
	GRL CountryCodes = "GRL"
	GTM CountryCodes = "GTM"
	GUF CountryCodes = "GUF"
	GUM CountryCodes = "GUM"
	GUY CountryCodes = "GUY"
	HKG CountryCodes = "HKG"
	HMD CountryCodes = "HMD"
	HND CountryCodes = "HND"
	HRV CountryCodes = "HRV"
	HTI CountryCodes = "HTI"
	HUN CountryCodes = "HUN"
	IDN CountryCodes = "IDN"
	IMN CountryCodes = "IMN"
	IND CountryCodes = "IND"
	IOT CountryCodes = "IOT"
	IRL CountryCodes = "IRL"
	IRN CountryCodes = "IRN"
	IRQ CountryCodes = "IRQ"
	ISL CountryCodes = "ISL"
	ISR CountryCodes = "ISR"
	ITA CountryCodes = "ITA"
	JAM CountryCodes = "JAM"
	JEY CountryCodes = "JEY"
	JOR CountryCodes = "JOR"
	JPN CountryCodes = "JPN"
	KAZ CountryCodes = "KAZ"
	KEN CountryCodes = "KEN"
	KGZ CountryCodes = "KGZ"
	KHM CountryCodes = "KHM"
	KIR CountryCodes = "KIR"
	KNA CountryCodes = "KNA"
	KOR CountryCodes = "KOR"
	KWT CountryCodes = "KWT"
	LAO CountryCodes = "LAO"
	LBN CountryCodes = "LBN"
	LBR CountryCodes = "LBR"
	LBY CountryCodes = "LBY"
	LCA CountryCodes = "LCA"
	LIE CountryCodes = "LIE"
	LKA CountryCodes = "LKA"
	LSO CountryCodes = "LSO"
	LTU CountryCodes = "LTU"
	LUX CountryCodes = "LUX"
	LVA CountryCodes = "LVA"
	MAC CountryCodes = "MAC"
	MAF CountryCodes = "MAF"
	MAR CountryCodes = "MAR"
	MCO CountryCodes = "MCO"
	MDA CountryCodes = "MDA"
	MDG CountryCodes = "MDG"
	MDV CountryCodes = "MDV"
	MEX CountryCodes = "MEX"
	MHL CountryCodes = "MHL"
	MKD CountryCodes = "MKD"
	MLI CountryCodes = "MLI"
	MLT CountryCodes = "MLT"
	MMR CountryCodes = "MMR"
	MNE CountryCodes = "MNE"
	MNG CountryCodes = "MNG"
	MNP CountryCodes = "MNP"
	MOZ CountryCodes = "MOZ"
	MRT CountryCodes = "MRT"
	MSR CountryCodes = "MSR"
	MTQ CountryCodes = "MTQ"
	MUS CountryCodes = "MUS"
	MWI CountryCodes = "MWI"
	MYS CountryCodes = "MYS"
	MYT CountryCodes = "MYT"
	NAM CountryCodes = "NAM"
	NCL CountryCodes = "NCL"
	NER CountryCodes = "NER"
	NFK CountryCodes = "NFK"
	NGA CountryCodes = "NGA"
	NIC CountryCodes = "NIC"
	NIU CountryCodes = "NIU"
	NLD CountryCodes = "NLD"
	NOR CountryCodes = "NOR"
	NPL CountryCodes = "NPL"
	NRU CountryCodes = "NRU"
	NZL CountryCodes = "NZL"
	OMN CountryCodes = "OMN"
	PAK CountryCodes = "PAK"
	PAN CountryCodes = "PAN"
	PCN CountryCodes = "PCN"
	PER CountryCodes = "PER"
	PHL CountryCodes = "PHL"
	PLW CountryCodes = "PLW"
	PNG CountryCodes = "PNG"
	POL CountryCodes = "POL"
	PRI CountryCodes = "PRI"
	PRK CountryCodes = "PRK"
	PRT CountryCodes = "PRT"
	PRY CountryCodes = "PRY"
	PSE CountryCodes = "PSE"
	PYF CountryCodes = "PYF"
	QAT CountryCodes = "QAT"
	REU CountryCodes = "REU"
	RKS CountryCodes = "RKS"
	ROU CountryCodes = "ROU"
	RUS CountryCodes = "RUS"
	RWA CountryCodes = "RWA"
	SAU CountryCodes = "SAU"
	SDN CountryCodes = "SDN"
	SEN CountryCodes = "SEN"
	SGP CountryCodes = "SGP"
	SGS CountryCodes = "SGS"
	SHN CountryCodes = "SHN"
	SJM CountryCodes = "SJM"
	SLB CountryCodes = "SLB"
	SLE CountryCodes = "SLE"
	SLV CountryCodes = "SLV"
	SMR CountryCodes = "SMR"
	SOM CountryCodes = "SOM"
	SPM CountryCodes = "SPM"
	SRB CountryCodes = "SRB"
	SSD CountryCodes = "SSD"
	STP CountryCodes = "STP"
	SUR CountryCodes = "SUR"
	SVK CountryCodes = "SVK"
	SVN CountryCodes = "SVN"
	SWE CountryCodes = "SWE"
	SWZ CountryCodes = "SWZ"
	SXM CountryCodes = "SXM"
	SYC CountryCodes = "SYC"
	SYR CountryCodes = "SYR"
	TCA CountryCodes = "TCA"
	TCD CountryCodes = "TCD"
	TGO CountryCodes = "TGO"
	THA CountryCodes = "THA"
	TJK CountryCodes = "TJK"
	TKL CountryCodes = "TKL"
	TKM CountryCodes = "TKM"
	TLS CountryCodes = "TLS"
	TON CountryCodes = "TON"
	TTO CountryCodes = "TTO"
	TUN CountryCodes = "TUN"
	TUR CountryCodes = "TUR"
	TUV CountryCodes = "TUV"
	TWN CountryCodes = "TWN"
	TZA CountryCodes = "TZA"
	UGA CountryCodes = "UGA"
	UKR CountryCodes = "UKR"
	UMI CountryCodes = "UMI"
	URY CountryCodes = "URY"
	USA CountryCodes = "USA"
	UZB CountryCodes = "UZB"
	VAT CountryCodes = "VAT"
	VCT CountryCodes = "VCT"
	VEN CountryCodes = "VEN"
	VGB CountryCodes = "VGB"
	VIR CountryCodes = "VIR"
	VNM CountryCodes = "VNM"
	VUT CountryCodes = "VUT"
	WLF CountryCodes = "WLF"
	WSM CountryCodes = "WSM"
	YEM CountryCodes = "YEM"
	ZAF CountryCodes = "ZAF"
	ZMB CountryCodes = "ZMB"
	ZWE CountryCodes = "ZWE"
)

// All allowed values of CountryCodes enum
var AllowedCountryCodesEnumValues = []CountryCodes{
	"ABW",
	"AFG",
	"AGO",
	"AIA",
	"ALA",
	"ALB",
	"AND",
	"ARE",
	"ARG",
	"ARM",
	"ASM",
	"ATA",
	"ATF",
	"ATG",
	"AUS",
	"AUT",
	"AZE",
	"BDI",
	"BEL",
	"BEN",
	"BES",
	"BFA",
	"BGD",
	"BGR",
	"BHR",
	"BHS",
	"BIH",
	"BLM",
	"BLR",
	"BLZ",
	"BMU",
	"BOL",
	"BRA",
	"BRB",
	"BRN",
	"BTN",
	"BVT",
	"BWA",
	"CAF",
	"CAN",
	"CCK",
	"CHE",
	"CHL",
	"CHN",
	"CIV",
	"CMR",
	"COD",
	"COG",
	"COK",
	"COL",
	"COM",
	"CPV",
	"CRI",
	"CUB",
	"CUW",
	"CXR",
	"CYM",
	"CYP",
	"CZE",
	"DEU",
	"DJI",
	"DMA",
	"DNK",
	"DOM",
	"DZA",
	"ECU",
	"EGY",
	"ERI",
	"ESH",
	"ESP",
	"EST",
	"ETH",
	"FIN",
	"FJI",
	"FLK",
	"FRA",
	"FRO",
	"FSM",
	"GAB",
	"GBR",
	"GEO",
	"GGY",
	"GHA",
	"GIB",
	"GIN",
	"GLP",
	"GMB",
	"GNB",
	"GNQ",
	"GRC",
	"GRD",
	"GRL",
	"GTM",
	"GUF",
	"GUM",
	"GUY",
	"HKG",
	"HMD",
	"HND",
	"HRV",
	"HTI",
	"HUN",
	"IDN",
	"IMN",
	"IND",
	"IOT",
	"IRL",
	"IRN",
	"IRQ",
	"ISL",
	"ISR",
	"ITA",
	"JAM",
	"JEY",
	"JOR",
	"JPN",
	"KAZ",
	"KEN",
	"KGZ",
	"KHM",
	"KIR",
	"KNA",
	"KOR",
	"KWT",
	"LAO",
	"LBN",
	"LBR",
	"LBY",
	"LCA",
	"LIE",
	"LKA",
	"LSO",
	"LTU",
	"LUX",
	"LVA",
	"MAC",
	"MAF",
	"MAR",
	"MCO",
	"MDA",
	"MDG",
	"MDV",
	"MEX",
	"MHL",
	"MKD",
	"MLI",
	"MLT",
	"MMR",
	"MNE",
	"MNG",
	"MNP",
	"MOZ",
	"MRT",
	"MSR",
	"MTQ",
	"MUS",
	"MWI",
	"MYS",
	"MYT",
	"NAM",
	"NCL",
	"NER",
	"NFK",
	"NGA",
	"NIC",
	"NIU",
	"NLD",
	"NOR",
	"NPL",
	"NRU",
	"NZL",
	"OMN",
	"PAK",
	"PAN",
	"PCN",
	"PER",
	"PHL",
	"PLW",
	"PNG",
	"POL",
	"PRI",
	"PRK",
	"PRT",
	"PRY",
	"PSE",
	"PYF",
	"QAT",
	"REU",
	"RKS",
	"ROU",
	"RUS",
	"RWA",
	"SAU",
	"SDN",
	"SEN",
	"SGP",
	"SGS",
	"SHN",
	"SJM",
	"SLB",
	"SLE",
	"SLV",
	"SMR",
	"SOM",
	"SPM",
	"SRB",
	"SSD",
	"STP",
	"SUR",
	"SVK",
	"SVN",
	"SWE",
	"SWZ",
	"SXM",
	"SYC",
	"SYR",
	"TCA",
	"TCD",
	"TGO",
	"THA",
	"TJK",
	"TKL",
	"TKM",
	"TLS",
	"TON",
	"TTO",
	"TUN",
	"TUR",
	"TUV",
	"TWN",
	"TZA",
	"UGA",
	"UKR",
	"UMI",
	"URY",
	"USA",
	"UZB",
	"VAT",
	"VCT",
	"VEN",
	"VGB",
	"VIR",
	"VNM",
	"VUT",
	"WLF",
	"WSM",
	"YEM",
	"ZAF",
	"ZMB",
	"ZWE",
}

func (v *CountryCodes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CountryCodes(value)
	for _, existing := range AllowedCountryCodesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CountryCodes", value)
}

// NewCountryCodesFromValue returns a pointer to a valid CountryCodes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCountryCodesFromValue(v string) (*CountryCodes, error) {
	ev := CountryCodes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CountryCodes: valid values are %v", v, AllowedCountryCodesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CountryCodes) IsValid() bool {
	for _, existing := range AllowedCountryCodesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to country_codes value
func (v CountryCodes) Ptr() *CountryCodes {
	return &v
}

type NullableCountryCodes struct {
	value *CountryCodes
	isSet bool
}

func (v NullableCountryCodes) Get() *CountryCodes {
	return v.value
}

func (v *NullableCountryCodes) Set(val *CountryCodes) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryCodes) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryCodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryCodes(val *CountryCodes) *NullableCountryCodes {
	return &NullableCountryCodes{value: val, isSet: true}
}

func (v NullableCountryCodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryCodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


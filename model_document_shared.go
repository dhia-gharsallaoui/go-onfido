/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DocumentShared type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentShared{}

// DocumentShared struct for DocumentShared
type DocumentShared struct {
	// The file type of the uploaded file
	FileType *string `json:"file_type,omitempty"`
	// The type of document
	Type *string `json:"type,omitempty"`
	// The side of the document, if applicable. The possible values are front and back
	Side *string `json:"side,omitempty"`
	// The issuing country of the document, a 3-letter ISO code.
	IssuingCountry *CountryCodes `json:"issuing_country,omitempty"`
	// The ID of the applicant whose document is being uploaded.
	ApplicantId *string `json:"applicant_id,omitempty"`
}

// NewDocumentShared instantiates a new DocumentShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentShared() *DocumentShared {
	this := DocumentShared{}
	return &this
}

// NewDocumentSharedWithDefaults instantiates a new DocumentShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentSharedWithDefaults() *DocumentShared {
	this := DocumentShared{}
	return &this
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *DocumentShared) GetFileType() string {
	if o == nil || IsNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentShared) GetFileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *DocumentShared) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *DocumentShared) SetFileType(v string) {
	o.FileType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DocumentShared) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentShared) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DocumentShared) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DocumentShared) SetType(v string) {
	o.Type = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *DocumentShared) GetSide() string {
	if o == nil || IsNil(o.Side) {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentShared) GetSideOk() (*string, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *DocumentShared) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *DocumentShared) SetSide(v string) {
	o.Side = &v
}

// GetIssuingCountry returns the IssuingCountry field value if set, zero value otherwise.
func (o *DocumentShared) GetIssuingCountry() CountryCodes {
	if o == nil || IsNil(o.IssuingCountry) {
		var ret CountryCodes
		return ret
	}
	return *o.IssuingCountry
}

// GetIssuingCountryOk returns a tuple with the IssuingCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentShared) GetIssuingCountryOk() (*CountryCodes, bool) {
	if o == nil || IsNil(o.IssuingCountry) {
		return nil, false
	}
	return o.IssuingCountry, true
}

// HasIssuingCountry returns a boolean if a field has been set.
func (o *DocumentShared) HasIssuingCountry() bool {
	if o != nil && !IsNil(o.IssuingCountry) {
		return true
	}

	return false
}

// SetIssuingCountry gets a reference to the given CountryCodes and assigns it to the IssuingCountry field.
func (o *DocumentShared) SetIssuingCountry(v CountryCodes) {
	o.IssuingCountry = &v
}

// GetApplicantId returns the ApplicantId field value if set, zero value otherwise.
func (o *DocumentShared) GetApplicantId() string {
	if o == nil || IsNil(o.ApplicantId) {
		var ret string
		return ret
	}
	return *o.ApplicantId
}

// GetApplicantIdOk returns a tuple with the ApplicantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentShared) GetApplicantIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicantId) {
		return nil, false
	}
	return o.ApplicantId, true
}

// HasApplicantId returns a boolean if a field has been set.
func (o *DocumentShared) HasApplicantId() bool {
	if o != nil && !IsNil(o.ApplicantId) {
		return true
	}

	return false
}

// SetApplicantId gets a reference to the given string and assigns it to the ApplicantId field.
func (o *DocumentShared) SetApplicantId(v string) {
	o.ApplicantId = &v
}

func (o DocumentShared) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentShared) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileType) {
		toSerialize["file_type"] = o.FileType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.IssuingCountry) {
		toSerialize["issuing_country"] = o.IssuingCountry
	}
	if !IsNil(o.ApplicantId) {
		toSerialize["applicant_id"] = o.ApplicantId
	}
	return toSerialize, nil
}

type NullableDocumentShared struct {
	value *DocumentShared
	isSet bool
}

func (v NullableDocumentShared) Get() *DocumentShared {
	return v.value
}

func (v *NullableDocumentShared) Set(val *DocumentShared) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentShared) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentShared(val *DocumentShared) *NullableDocumentShared {
	return &NullableDocumentShared{value: val, isSet: true}
}

func (v NullableDocumentShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



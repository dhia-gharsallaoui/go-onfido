/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeviceIntelligenceBreakdownBreakdownDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceIntelligenceBreakdownBreakdownDevice{}

// DeviceIntelligenceBreakdownBreakdownDevice Asserts whether the device used to upload the media is trustworthy, i.e. it is a real, physical device.
type DeviceIntelligenceBreakdownBreakdownDevice struct {
	Breakdown *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown `json:"breakdown,omitempty"`
}

// NewDeviceIntelligenceBreakdownBreakdownDevice instantiates a new DeviceIntelligenceBreakdownBreakdownDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceIntelligenceBreakdownBreakdownDevice() *DeviceIntelligenceBreakdownBreakdownDevice {
	this := DeviceIntelligenceBreakdownBreakdownDevice{}
	return &this
}

// NewDeviceIntelligenceBreakdownBreakdownDeviceWithDefaults instantiates a new DeviceIntelligenceBreakdownBreakdownDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceIntelligenceBreakdownBreakdownDeviceWithDefaults() *DeviceIntelligenceBreakdownBreakdownDevice {
	this := DeviceIntelligenceBreakdownBreakdownDevice{}
	return &this
}

// GetBreakdown returns the Breakdown field value if set, zero value otherwise.
func (o *DeviceIntelligenceBreakdownBreakdownDevice) GetBreakdown() DeviceIntelligenceBreakdownBreakdownDeviceBreakdown {
	if o == nil || IsNil(o.Breakdown) {
		var ret DeviceIntelligenceBreakdownBreakdownDeviceBreakdown
		return ret
	}
	return *o.Breakdown
}

// GetBreakdownOk returns a tuple with the Breakdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceIntelligenceBreakdownBreakdownDevice) GetBreakdownOk() (*DeviceIntelligenceBreakdownBreakdownDeviceBreakdown, bool) {
	if o == nil || IsNil(o.Breakdown) {
		return nil, false
	}
	return o.Breakdown, true
}

// HasBreakdown returns a boolean if a field has been set.
func (o *DeviceIntelligenceBreakdownBreakdownDevice) HasBreakdown() bool {
	if o != nil && !IsNil(o.Breakdown) {
		return true
	}

	return false
}

// SetBreakdown gets a reference to the given DeviceIntelligenceBreakdownBreakdownDeviceBreakdown and assigns it to the Breakdown field.
func (o *DeviceIntelligenceBreakdownBreakdownDevice) SetBreakdown(v DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) {
	o.Breakdown = &v
}

func (o DeviceIntelligenceBreakdownBreakdownDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceIntelligenceBreakdownBreakdownDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Breakdown) {
		toSerialize["breakdown"] = o.Breakdown
	}
	return toSerialize, nil
}

type NullableDeviceIntelligenceBreakdownBreakdownDevice struct {
	value *DeviceIntelligenceBreakdownBreakdownDevice
	isSet bool
}

func (v NullableDeviceIntelligenceBreakdownBreakdownDevice) Get() *DeviceIntelligenceBreakdownBreakdownDevice {
	return v.value
}

func (v *NullableDeviceIntelligenceBreakdownBreakdownDevice) Set(val *DeviceIntelligenceBreakdownBreakdownDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceIntelligenceBreakdownBreakdownDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceIntelligenceBreakdownBreakdownDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceIntelligenceBreakdownBreakdownDevice(val *DeviceIntelligenceBreakdownBreakdownDevice) *NullableDeviceIntelligenceBreakdownBreakdownDevice {
	return &NullableDeviceIntelligenceBreakdownBreakdownDevice{value: val, isSet: true}
}

func (v NullableDeviceIntelligenceBreakdownBreakdownDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceIntelligenceBreakdownBreakdownDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



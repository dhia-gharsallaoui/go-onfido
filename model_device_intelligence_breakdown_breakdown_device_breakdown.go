/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeviceIntelligenceBreakdownBreakdownDeviceBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceIntelligenceBreakdownBreakdownDeviceBreakdown{}

// DeviceIntelligenceBreakdownBreakdownDeviceBreakdown struct for DeviceIntelligenceBreakdownBreakdownDeviceBreakdown
type DeviceIntelligenceBreakdownBreakdownDeviceBreakdown struct {
	ApplicationAuthenticity *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"application_authenticity,omitempty"`
	DeviceIntegrity *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"device_integrity,omitempty"`
	DeviceReputation *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"device_reputation,omitempty"`
}

// NewDeviceIntelligenceBreakdownBreakdownDeviceBreakdown instantiates a new DeviceIntelligenceBreakdownBreakdownDeviceBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceIntelligenceBreakdownBreakdownDeviceBreakdown() *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown {
	this := DeviceIntelligenceBreakdownBreakdownDeviceBreakdown{}
	return &this
}

// NewDeviceIntelligenceBreakdownBreakdownDeviceBreakdownWithDefaults instantiates a new DeviceIntelligenceBreakdownBreakdownDeviceBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceIntelligenceBreakdownBreakdownDeviceBreakdownWithDefaults() *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown {
	this := DeviceIntelligenceBreakdownBreakdownDeviceBreakdown{}
	return &this
}

// GetApplicationAuthenticity returns the ApplicationAuthenticity field value if set, zero value otherwise.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) GetApplicationAuthenticity() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.ApplicationAuthenticity) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.ApplicationAuthenticity
}

// GetApplicationAuthenticityOk returns a tuple with the ApplicationAuthenticity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) GetApplicationAuthenticityOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.ApplicationAuthenticity) {
		return nil, false
	}
	return o.ApplicationAuthenticity, true
}

// HasApplicationAuthenticity returns a boolean if a field has been set.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) HasApplicationAuthenticity() bool {
	if o != nil && !IsNil(o.ApplicationAuthenticity) {
		return true
	}

	return false
}

// SetApplicationAuthenticity gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the ApplicationAuthenticity field.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) SetApplicationAuthenticity(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.ApplicationAuthenticity = &v
}

// GetDeviceIntegrity returns the DeviceIntegrity field value if set, zero value otherwise.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) GetDeviceIntegrity() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.DeviceIntegrity) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.DeviceIntegrity
}

// GetDeviceIntegrityOk returns a tuple with the DeviceIntegrity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) GetDeviceIntegrityOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.DeviceIntegrity) {
		return nil, false
	}
	return o.DeviceIntegrity, true
}

// HasDeviceIntegrity returns a boolean if a field has been set.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) HasDeviceIntegrity() bool {
	if o != nil && !IsNil(o.DeviceIntegrity) {
		return true
	}

	return false
}

// SetDeviceIntegrity gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the DeviceIntegrity field.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) SetDeviceIntegrity(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.DeviceIntegrity = &v
}

// GetDeviceReputation returns the DeviceReputation field value if set, zero value otherwise.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) GetDeviceReputation() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.DeviceReputation) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.DeviceReputation
}

// GetDeviceReputationOk returns a tuple with the DeviceReputation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) GetDeviceReputationOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.DeviceReputation) {
		return nil, false
	}
	return o.DeviceReputation, true
}

// HasDeviceReputation returns a boolean if a field has been set.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) HasDeviceReputation() bool {
	if o != nil && !IsNil(o.DeviceReputation) {
		return true
	}

	return false
}

// SetDeviceReputation gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the DeviceReputation field.
func (o *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) SetDeviceReputation(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.DeviceReputation = &v
}

func (o DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationAuthenticity) {
		toSerialize["application_authenticity"] = o.ApplicationAuthenticity
	}
	if !IsNil(o.DeviceIntegrity) {
		toSerialize["device_integrity"] = o.DeviceIntegrity
	}
	if !IsNil(o.DeviceReputation) {
		toSerialize["device_reputation"] = o.DeviceReputation
	}
	return toSerialize, nil
}

type NullableDeviceIntelligenceBreakdownBreakdownDeviceBreakdown struct {
	value *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown
	isSet bool
}

func (v NullableDeviceIntelligenceBreakdownBreakdownDeviceBreakdown) Get() *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown {
	return v.value
}

func (v *NullableDeviceIntelligenceBreakdownBreakdownDeviceBreakdown) Set(val *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceIntelligenceBreakdownBreakdownDeviceBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceIntelligenceBreakdownBreakdownDeviceBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceIntelligenceBreakdownBreakdownDeviceBreakdown(val *DeviceIntelligenceBreakdownBreakdownDeviceBreakdown) *NullableDeviceIntelligenceBreakdownBreakdownDeviceBreakdown {
	return &NullableDeviceIntelligenceBreakdownBreakdownDeviceBreakdown{value: val, isSet: true}
}

func (v NullableDeviceIntelligenceBreakdownBreakdownDeviceBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceIntelligenceBreakdownBreakdownDeviceBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



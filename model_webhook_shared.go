/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WebhookShared type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookShared{}

// WebhookShared struct for WebhookShared
type WebhookShared struct {
	// Determine if the webhook is active.
	Enabled *bool `json:"enabled,omitempty"`
	// The events that will be published to the webhook. If the events parameter is omitted all the events will be subscribed. 
	Events []WebhookEventType `json:"events,omitempty"`
	// The environments from which the webhook will receive events. Allowed values are “sandbox” and “live”. If the environments parameter is omitted the webhook will receive events from both environments. 
	Environments []string `json:"environments,omitempty"`
	// Webhook version used to control the payload object when sending webhooks.
	PayloadVersion *int32 `json:"payload_version,omitempty"`
}

// NewWebhookShared instantiates a new WebhookShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookShared() *WebhookShared {
	this := WebhookShared{}
	return &this
}

// NewWebhookSharedWithDefaults instantiates a new WebhookShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookSharedWithDefaults() *WebhookShared {
	this := WebhookShared{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *WebhookShared) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookShared) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *WebhookShared) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *WebhookShared) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *WebhookShared) GetEvents() []WebhookEventType {
	if o == nil || IsNil(o.Events) {
		var ret []WebhookEventType
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookShared) GetEventsOk() ([]WebhookEventType, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *WebhookShared) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []WebhookEventType and assigns it to the Events field.
func (o *WebhookShared) SetEvents(v []WebhookEventType) {
	o.Events = v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *WebhookShared) GetEnvironments() []string {
	if o == nil || IsNil(o.Environments) {
		var ret []string
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookShared) GetEnvironmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *WebhookShared) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *WebhookShared) SetEnvironments(v []string) {
	o.Environments = v
}

// GetPayloadVersion returns the PayloadVersion field value if set, zero value otherwise.
func (o *WebhookShared) GetPayloadVersion() int32 {
	if o == nil || IsNil(o.PayloadVersion) {
		var ret int32
		return ret
	}
	return *o.PayloadVersion
}

// GetPayloadVersionOk returns a tuple with the PayloadVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookShared) GetPayloadVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.PayloadVersion) {
		return nil, false
	}
	return o.PayloadVersion, true
}

// HasPayloadVersion returns a boolean if a field has been set.
func (o *WebhookShared) HasPayloadVersion() bool {
	if o != nil && !IsNil(o.PayloadVersion) {
		return true
	}

	return false
}

// SetPayloadVersion gets a reference to the given int32 and assigns it to the PayloadVersion field.
func (o *WebhookShared) SetPayloadVersion(v int32) {
	o.PayloadVersion = &v
}

func (o WebhookShared) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookShared) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	if !IsNil(o.PayloadVersion) {
		toSerialize["payload_version"] = o.PayloadVersion
	}
	return toSerialize, nil
}

type NullableWebhookShared struct {
	value *WebhookShared
	isSet bool
}

func (v NullableWebhookShared) Get() *WebhookShared {
	return v.value
}

func (v *NullableWebhookShared) Set(val *WebhookShared) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookShared) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookShared(val *WebhookShared) *NullableWebhookShared {
	return &NullableWebhookShared{value: val, isSet: true}
}

func (v NullableWebhookShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



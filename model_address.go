/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Address type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Address{}

// Address struct for Address
type Address struct {
	// The flat number of this address
	FlatNumber *string `json:"flat_number,omitempty"`
	// The building number of this address
	BuildingNumber *string `json:"building_number,omitempty"`
	// The building name of this address
	BuildingName *string `json:"building_name,omitempty"`
	// The street of the applicant's address
	Street *string `json:"street,omitempty"`
	// The sub-street of the applicant's address
	SubStreet *string `json:"sub_street,omitempty"`
	// The town of the applicant's address
	Town *string `json:"town,omitempty"`
	// The postcode or ZIP of the applicant's address
	Postcode string `json:"postcode"`
	// The 3 character ISO country code of this address. For example, GBR is the country code for the United Kingdom
	Country CountryCodes `json:"country"`
	// The address state. US states must use the USPS abbreviation (see also ISO 3166-2:US), for example AK, CA, or TX.
	State *string `json:"state,omitempty"`
	// Line 1 of the applicant's address
	Line1 NullableString `json:"line1,omitempty" validate:"regexp=^[^!$%^*=<>]*$"`
	// Line 2 of the applicant's address
	Line2 NullableString `json:"line2,omitempty" validate:"regexp=^[^!$%^*=<>]*$"`
	// Line 3 of the applicant's address
	Line3 NullableString `json:"line3,omitempty" validate:"regexp=^[^!$%^*=<>]*$"`
}

type _Address Address

// NewAddress instantiates a new Address object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddress(postcode string, country CountryCodes) *Address {
	this := Address{}
	this.Postcode = postcode
	this.Country = country
	return &this
}

// NewAddressWithDefaults instantiates a new Address object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressWithDefaults() *Address {
	this := Address{}
	return &this
}

// GetFlatNumber returns the FlatNumber field value if set, zero value otherwise.
func (o *Address) GetFlatNumber() string {
	if o == nil || IsNil(o.FlatNumber) {
		var ret string
		return ret
	}
	return *o.FlatNumber
}

// GetFlatNumberOk returns a tuple with the FlatNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetFlatNumberOk() (*string, bool) {
	if o == nil || IsNil(o.FlatNumber) {
		return nil, false
	}
	return o.FlatNumber, true
}

// HasFlatNumber returns a boolean if a field has been set.
func (o *Address) HasFlatNumber() bool {
	if o != nil && !IsNil(o.FlatNumber) {
		return true
	}

	return false
}

// SetFlatNumber gets a reference to the given string and assigns it to the FlatNumber field.
func (o *Address) SetFlatNumber(v string) {
	o.FlatNumber = &v
}

// GetBuildingNumber returns the BuildingNumber field value if set, zero value otherwise.
func (o *Address) GetBuildingNumber() string {
	if o == nil || IsNil(o.BuildingNumber) {
		var ret string
		return ret
	}
	return *o.BuildingNumber
}

// GetBuildingNumberOk returns a tuple with the BuildingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetBuildingNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BuildingNumber) {
		return nil, false
	}
	return o.BuildingNumber, true
}

// HasBuildingNumber returns a boolean if a field has been set.
func (o *Address) HasBuildingNumber() bool {
	if o != nil && !IsNil(o.BuildingNumber) {
		return true
	}

	return false
}

// SetBuildingNumber gets a reference to the given string and assigns it to the BuildingNumber field.
func (o *Address) SetBuildingNumber(v string) {
	o.BuildingNumber = &v
}

// GetBuildingName returns the BuildingName field value if set, zero value otherwise.
func (o *Address) GetBuildingName() string {
	if o == nil || IsNil(o.BuildingName) {
		var ret string
		return ret
	}
	return *o.BuildingName
}

// GetBuildingNameOk returns a tuple with the BuildingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetBuildingNameOk() (*string, bool) {
	if o == nil || IsNil(o.BuildingName) {
		return nil, false
	}
	return o.BuildingName, true
}

// HasBuildingName returns a boolean if a field has been set.
func (o *Address) HasBuildingName() bool {
	if o != nil && !IsNil(o.BuildingName) {
		return true
	}

	return false
}

// SetBuildingName gets a reference to the given string and assigns it to the BuildingName field.
func (o *Address) SetBuildingName(v string) {
	o.BuildingName = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *Address) GetStreet() string {
	if o == nil || IsNil(o.Street) {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetStreetOk() (*string, bool) {
	if o == nil || IsNil(o.Street) {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *Address) HasStreet() bool {
	if o != nil && !IsNil(o.Street) {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *Address) SetStreet(v string) {
	o.Street = &v
}

// GetSubStreet returns the SubStreet field value if set, zero value otherwise.
func (o *Address) GetSubStreet() string {
	if o == nil || IsNil(o.SubStreet) {
		var ret string
		return ret
	}
	return *o.SubStreet
}

// GetSubStreetOk returns a tuple with the SubStreet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetSubStreetOk() (*string, bool) {
	if o == nil || IsNil(o.SubStreet) {
		return nil, false
	}
	return o.SubStreet, true
}

// HasSubStreet returns a boolean if a field has been set.
func (o *Address) HasSubStreet() bool {
	if o != nil && !IsNil(o.SubStreet) {
		return true
	}

	return false
}

// SetSubStreet gets a reference to the given string and assigns it to the SubStreet field.
func (o *Address) SetSubStreet(v string) {
	o.SubStreet = &v
}

// GetTown returns the Town field value if set, zero value otherwise.
func (o *Address) GetTown() string {
	if o == nil || IsNil(o.Town) {
		var ret string
		return ret
	}
	return *o.Town
}

// GetTownOk returns a tuple with the Town field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetTownOk() (*string, bool) {
	if o == nil || IsNil(o.Town) {
		return nil, false
	}
	return o.Town, true
}

// HasTown returns a boolean if a field has been set.
func (o *Address) HasTown() bool {
	if o != nil && !IsNil(o.Town) {
		return true
	}

	return false
}

// SetTown gets a reference to the given string and assigns it to the Town field.
func (o *Address) SetTown(v string) {
	o.Town = &v
}

// GetPostcode returns the Postcode field value
func (o *Address) GetPostcode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value
// and a boolean to check if the value has been set.
func (o *Address) GetPostcodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Postcode, true
}

// SetPostcode sets field value
func (o *Address) SetPostcode(v string) {
	o.Postcode = v
}

// GetCountry returns the Country field value
func (o *Address) GetCountry() CountryCodes {
	if o == nil {
		var ret CountryCodes
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *Address) GetCountryOk() (*CountryCodes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *Address) SetCountry(v CountryCodes) {
	o.Country = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Address) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Address) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Address) SetState(v string) {
	o.State = &v
}

// GetLine1 returns the Line1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetLine1() string {
	if o == nil || IsNil(o.Line1.Get()) {
		var ret string
		return ret
	}
	return *o.Line1.Get()
}

// GetLine1Ok returns a tuple with the Line1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetLine1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Line1.Get(), o.Line1.IsSet()
}

// HasLine1 returns a boolean if a field has been set.
func (o *Address) HasLine1() bool {
	if o != nil && o.Line1.IsSet() {
		return true
	}

	return false
}

// SetLine1 gets a reference to the given NullableString and assigns it to the Line1 field.
func (o *Address) SetLine1(v string) {
	o.Line1.Set(&v)
}
// SetLine1Nil sets the value for Line1 to be an explicit nil
func (o *Address) SetLine1Nil() {
	o.Line1.Set(nil)
}

// UnsetLine1 ensures that no value is present for Line1, not even an explicit nil
func (o *Address) UnsetLine1() {
	o.Line1.Unset()
}

// GetLine2 returns the Line2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetLine2() string {
	if o == nil || IsNil(o.Line2.Get()) {
		var ret string
		return ret
	}
	return *o.Line2.Get()
}

// GetLine2Ok returns a tuple with the Line2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetLine2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Line2.Get(), o.Line2.IsSet()
}

// HasLine2 returns a boolean if a field has been set.
func (o *Address) HasLine2() bool {
	if o != nil && o.Line2.IsSet() {
		return true
	}

	return false
}

// SetLine2 gets a reference to the given NullableString and assigns it to the Line2 field.
func (o *Address) SetLine2(v string) {
	o.Line2.Set(&v)
}
// SetLine2Nil sets the value for Line2 to be an explicit nil
func (o *Address) SetLine2Nil() {
	o.Line2.Set(nil)
}

// UnsetLine2 ensures that no value is present for Line2, not even an explicit nil
func (o *Address) UnsetLine2() {
	o.Line2.Unset()
}

// GetLine3 returns the Line3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetLine3() string {
	if o == nil || IsNil(o.Line3.Get()) {
		var ret string
		return ret
	}
	return *o.Line3.Get()
}

// GetLine3Ok returns a tuple with the Line3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetLine3Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Line3.Get(), o.Line3.IsSet()
}

// HasLine3 returns a boolean if a field has been set.
func (o *Address) HasLine3() bool {
	if o != nil && o.Line3.IsSet() {
		return true
	}

	return false
}

// SetLine3 gets a reference to the given NullableString and assigns it to the Line3 field.
func (o *Address) SetLine3(v string) {
	o.Line3.Set(&v)
}
// SetLine3Nil sets the value for Line3 to be an explicit nil
func (o *Address) SetLine3Nil() {
	o.Line3.Set(nil)
}

// UnsetLine3 ensures that no value is present for Line3, not even an explicit nil
func (o *Address) UnsetLine3() {
	o.Line3.Unset()
}

func (o Address) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Address) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FlatNumber) {
		toSerialize["flat_number"] = o.FlatNumber
	}
	if !IsNil(o.BuildingNumber) {
		toSerialize["building_number"] = o.BuildingNumber
	}
	if !IsNil(o.BuildingName) {
		toSerialize["building_name"] = o.BuildingName
	}
	if !IsNil(o.Street) {
		toSerialize["street"] = o.Street
	}
	if !IsNil(o.SubStreet) {
		toSerialize["sub_street"] = o.SubStreet
	}
	if !IsNil(o.Town) {
		toSerialize["town"] = o.Town
	}
	toSerialize["postcode"] = o.Postcode
	toSerialize["country"] = o.Country
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.Line1.IsSet() {
		toSerialize["line1"] = o.Line1.Get()
	}
	if o.Line2.IsSet() {
		toSerialize["line2"] = o.Line2.Get()
	}
	if o.Line3.IsSet() {
		toSerialize["line3"] = o.Line3.Get()
	}
	return toSerialize, nil
}

func (o *Address) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"postcode",
		"country",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddress := _Address{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddress)

	if err != nil {
		return err
	}

	*o = Address(varAddress)

	return err
}

type NullableAddress struct {
	value *Address
	isSet bool
}

func (v NullableAddress) Get() *Address {
	return v.value
}

func (v *NullableAddress) Set(val *Address) {
	v.value = val
	v.isSet = true
}

func (v NullableAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddress(val *Address) *NullableAddress {
	return &NullableAddress{value: val, isSet: true}
}

func (v NullableAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



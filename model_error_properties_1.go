/*
Onfido API v3.6

The Onfido API (v3.6)

API version: v3.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ErrorProperties1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorProperties1{}

// ErrorProperties1 struct for ErrorProperties1
type ErrorProperties1 struct {
	Type *string `json:"type,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewErrorProperties1 instantiates a new ErrorProperties1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorProperties1() *ErrorProperties1 {
	this := ErrorProperties1{}
	return &this
}

// NewErrorProperties1WithDefaults instantiates a new ErrorProperties1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorProperties1WithDefaults() *ErrorProperties1 {
	this := ErrorProperties1{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ErrorProperties1) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorProperties1) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ErrorProperties1) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ErrorProperties1) SetType(v string) {
	o.Type = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorProperties1) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorProperties1) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorProperties1) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorProperties1) SetMessage(v string) {
	o.Message = &v
}

func (o ErrorProperties1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorProperties1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableErrorProperties1 struct {
	value *ErrorProperties1
	isSet bool
}

func (v NullableErrorProperties1) Get() *ErrorProperties1 {
	return v.value
}

func (v *NullableErrorProperties1) Set(val *ErrorProperties1) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorProperties1) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorProperties1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorProperties1(val *ErrorProperties1) *NullableErrorProperties1 {
	return &NullableErrorProperties1{value: val, isSet: true}
}

func (v NullableErrorProperties1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorProperties1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


